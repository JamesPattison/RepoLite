//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Biomind.Data.Repositories.Base;
using Biomind.Data.Models;
using Biomind.Data.Models.Base;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Xml;
using MySqlConnector;

namespace Biomind.Data.Repositories
{
    public partial interface Iorganisation_data__originatorRepository : IPkRepository<organisation_data__originatorDbModel>
    {
		organisation_data__originatorDbModel Get(long id);
		IEnumerable<organisation_data__originatorDbModel> Get(List<long> ids);
		IEnumerable<organisation_data__originatorDbModel> Get(params long[] ids);
		
        long GetMaxId();
		bool Delete(long id);
		bool Delete(IEnumerable<long> ids);

        bool DeleteByname(string name);
        bool DeleteByalias(string alias);
        bool DeleteBylast_modified_by(string last_modified_by);
        bool DeleteBylast_modified(DateTime last_modified);
        bool DeleteBycreated(DateTime created);
        bool DeleteBycreated_by(string created_by);

        IEnumerable<organisation_data__originatorDbModel> Search(
            string name = null,
            string alias = null,
            string last_modified_by = null,
            DateTime? last_modified = null,
            DateTime? created = null,
            string created_by = null);

        IEnumerable<organisation_data__originatorDbModel> FindByname(string name);
        IEnumerable<organisation_data__originatorDbModel> FindByname(FindComparison comparison, string name);
        IEnumerable<organisation_data__originatorDbModel> FindByalias(string alias);
        IEnumerable<organisation_data__originatorDbModel> FindByalias(FindComparison comparison, string alias);
        IEnumerable<organisation_data__originatorDbModel> FindBylast_modified_by(string last_modified_by);
        IEnumerable<organisation_data__originatorDbModel> FindBylast_modified_by(FindComparison comparison, string last_modified_by);
        IEnumerable<organisation_data__originatorDbModel> FindBylast_modified(DateTime last_modified);
        IEnumerable<organisation_data__originatorDbModel> FindBylast_modified(FindComparison comparison, DateTime last_modified);
        IEnumerable<organisation_data__originatorDbModel> FindBycreated(DateTime created);
        IEnumerable<organisation_data__originatorDbModel> FindBycreated(FindComparison comparison, DateTime created);
        IEnumerable<organisation_data__originatorDbModel> FindBycreated_by(string created_by);
        IEnumerable<organisation_data__originatorDbModel> FindBycreated_by(FindComparison comparison, string created_by);
    }
    public partial class organisation_data__originatorRepository : BaseRepository<organisation_data__originatorDbModel>, Iorganisation_data__originatorRepository
    {

        partial void InitializeExtension();
        
		public organisation_data__originatorRepository(string connectionString) : this(connectionString, exception => { }) { }
		public organisation_data__originatorRepository(string connectionString, Action<Exception> logMethod) 
			: base(connectionString, logMethod, organisation_data__originatorDbModel.Schema, organisation_data__originatorDbModel.TableName, organisation_data__originatorDbModel.Columns)
		{
			InitializeExtension();
		}


        public organisation_data__originatorDbModel Get(long id)
        {
            return Where("id", Comparison.Equals, id).Results().FirstOrDefault();
        }

        public IEnumerable<organisation_data__originatorDbModel> Get(List<long> ids)
        {
            var toReturn = new List<organisation_data__originatorDbModel>();
            if (!ids.Any()) return toReturn;
            toReturn.AddRange(Where("id", Comparison.In, ids).Results()); 
            return toReturn;
        }

        public IEnumerable<organisation_data__originatorDbModel> Get(params long[] ids)
        {
            return Get(ids.ToList());
        }

        public long GetMaxId()
        {
            using (var cn = new MySqlConnection(ConnectionString))
            {
                using (var cmd = CreateCommand(cn, "SELECT ISNULL(MAX(id), 0) FROM organisation_data__originator"))
                {
                    cn.Open();
                    return (long)cmd.ExecuteScalar();
                }
            }
        }
        public override IEnumerable<organisation_data__originatorDbModel> GetAll()
        {
            var query = $@"SELECT * FROM `democlient`.`organisation_data__originator`
";
            return ExecuteSql(query);
        }



       public override bool Create(organisation_data__originatorDbModel item)
        {
            //Validation
            if (item == null)
                return false;

            var validationErrors = item.Validate();
            if (validationErrors.Any())
                throw new ValidationException(validationErrors);

            var createdKeys = BaseCreate(
                    item.id,
                    item.name,
                    item.alias,
                    item.last_modified_by,
                    item.last_modified,
                    item.created,
                    item.created_by);
            if (createdKeys.Count != organisation_data__originatorDbModel.Columns.Count(x => x.PrimaryKey))
                return false;

            item.id = System.Int64.Parse(createdKeys.First().Value.ToString());
            item.ResetDirty();

            return true;
        }

        public override bool BulkCreate(params organisation_data__originatorDbModel[] items)
        {
            if (!items.Any())
                return false;

            var validationErrors = items.SelectMany(x => x.Validate()).ToList();
            if (validationErrors.Any())
                throw new ValidationException(validationErrors);

			var dt = new DataTable();
			foreach (var mergeColumn in organisation_data__originatorDbModel.Columns.Where(x => !x.PrimaryKey || x.PrimaryKey && !x.Identity))
				dt.Columns.Add(mergeColumn.ColumnName, mergeColumn.ValueType);

			foreach (var item in items)
			{
				dt.Rows.Add(
                    item.id,
                    item.name,
                    item.alias,
                    item.last_modified_by,
                    item.last_modified,
                    item.created,
                    item.created_by);
			}

			if (BulkInsert(dt))
			{
				return true;
			}
			return false;
        }
        public override bool BulkCreate(List<organisation_data__originatorDbModel> items)
        {
            return BulkCreate(items.ToArray());
        }

        public bool Update(organisation_data__originatorDbModel item, bool clearDirty = true)
        {
            if (item == null)
                return false;

            var validationErrors = item.Validate();
            if (validationErrors.Any())
                throw new ValidationException(validationErrors);

            var success = BaseUpdate(item.DirtyColumns, 
                item.id, item.name, item.alias, item.last_modified_by, item.last_modified, 
				item.created, item.created_by);

            if (success && clearDirty)
                item.ResetDirty();

            return success;
        }


 
 
       public bool Delete(organisation_data__originatorDbModel item)
        {
            if (item == null)
                return false;

            var deleteColumn = new DeleteColumn("id", item.id, MySqlDbType.Int64);

            if (BaseDelete(deleteColumn, out var items))
            {
                return true;
            }
            return false;
        }
        public bool Delete(IEnumerable<organisation_data__originatorDbModel> items)
        {
            if (!items.Any()) return true;
            var deleteValues = new List<object>();
            foreach (var item in items)
            {
                deleteValues.Add(item.id);
            }

            if (BaseDelete("id", deleteValues))
            {
                return true;
            }
            return false;
        }

        public bool Delete(long id)
        {
            if (Delete(new organisation_data__originatorDbModel { id = id }))
            {
                return true;
            }
            return false;
        }

        public bool Delete(IEnumerable<long> ids)
        {
            if (!ids.Any()) return true;
            var deleteValues = new List<object>();
            deleteValues.AddRange(ids.Cast<object>());
            if (BaseDelete("id", deleteValues))
            {
                return true;
            }
            return false;
        }
 
        public bool DeleteByname(string name)
        {
            if (BaseDelete(new DeleteColumn(nameof(organisation_data__originatorDbModel.name), name, MySqlDbType.VarChar), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteByalias(string alias)
        {
            if (BaseDelete(new DeleteColumn(nameof(organisation_data__originatorDbModel.alias), alias, MySqlDbType.VarChar), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteBylast_modified_by(string last_modified_by)
        {
            if (BaseDelete(new DeleteColumn(nameof(organisation_data__originatorDbModel.last_modified_by), last_modified_by, MySqlDbType.VarChar), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteBylast_modified(DateTime last_modified)
        {
            if (BaseDelete(new DeleteColumn(nameof(organisation_data__originatorDbModel.last_modified), last_modified, MySqlDbType.Timestamp), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteBycreated(DateTime created)
        {
            if (BaseDelete(new DeleteColumn(nameof(organisation_data__originatorDbModel.created), created, MySqlDbType.Timestamp), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteBycreated_by(string created_by)
        {
            if (BaseDelete(new DeleteColumn(nameof(organisation_data__originatorDbModel.created_by), created_by, MySqlDbType.VarChar), out var items))
            {
                return true;
			}
			return false;
		}


        public bool Merge(List<organisation_data__originatorDbModel> items)
        {

            var mergeTable = new List<object[]>();
            var updates = items.Where(x => x.id != default).GroupBy(x => x.id).Select(x => x.Last());
            foreach (var item in items.Where(x => x.id == default).Union(updates))
            {
                mergeTable.Add(new object[]
                {
					item.id,
					item.name, item.DirtyColumns.Contains("name"),
					item.alias, item.DirtyColumns.Contains("alias"),
					item.last_modified_by, item.DirtyColumns.Contains("last_modified_by"),
					item.last_modified, item.DirtyColumns.Contains("last_modified"),
					item.created, item.DirtyColumns.Contains("created"),
					item.created_by, item.DirtyColumns.Contains("created_by")

                });
            }
            return BaseMerge(mergeTable);
        }
        public bool Merge(string csvPath)
        {
            var mergeTable = new List<object[]>();
            using (var sr = new StreamReader(csvPath))
            {
                var line = sr.ReadLine();
                if (line == null) return false;

                var firstItem = line.Split(',')[0];
                if (firstItem == "id")
                {
                    //CSV has headers
                    //Run to the next line
                    line = sr.ReadLine();
                    if (line == null) return true;
                }

                do
                {
                    var blocks = line.Split(',');
                    mergeTable.Add(new object[]
                    {
                        Cast<long>(blocks[0]),
                        Cast<long>(blocks[1]), true,
                    });
                } while ((line = sr.ReadLine()) != null);


                return BaseMerge(mergeTable);
            }
        }


        public IEnumerable<organisation_data__originatorDbModel> Search(
            string name = null,
            string alias = null,
            string last_modified_by = null,
            DateTime? last_modified = null,
            DateTime? created = null,
            string created_by = null)
        {
            var queries = new List<QueryItem>();

            if (name != null)
            queries.Add(new QueryItem(nameof(organisation_data__originatorDbModel.name), name));
            if (alias != null)
            queries.Add(new QueryItem(nameof(organisation_data__originatorDbModel.alias), alias));
            if (last_modified_by != null)
            queries.Add(new QueryItem(nameof(organisation_data__originatorDbModel.last_modified_by), last_modified_by));
            if (last_modified.HasValue)
            queries.Add(new QueryItem(nameof(organisation_data__originatorDbModel.last_modified), last_modified));
            if (created.HasValue)
            queries.Add(new QueryItem(nameof(organisation_data__originatorDbModel.created), created));
            if (created_by != null)
            queries.Add(new QueryItem(nameof(organisation_data__originatorDbModel.created_by), created_by));

            return BaseSearch(queries);
        }


 
        public IEnumerable<organisation_data__originatorDbModel> FindByname(string name)
        {
            return FindByname(FindComparison.Equals, name);
        }

        public IEnumerable<organisation_data__originatorDbModel> FindByname(FindComparison comparison, string name)
        {
            var items = Where(nameof(organisation_data__originatorDbModel.name), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), name).Results();
			return items;
        }
 
        public IEnumerable<organisation_data__originatorDbModel> FindByalias(string alias)
        {
            return FindByalias(FindComparison.Equals, alias);
        }

        public IEnumerable<organisation_data__originatorDbModel> FindByalias(FindComparison comparison, string alias)
        {
            var items = Where(nameof(organisation_data__originatorDbModel.alias), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), alias).Results();
			return items;
        }
 
        public IEnumerable<organisation_data__originatorDbModel> FindBylast_modified_by(string last_modified_by)
        {
            return FindBylast_modified_by(FindComparison.Equals, last_modified_by);
        }

        public IEnumerable<organisation_data__originatorDbModel> FindBylast_modified_by(FindComparison comparison, string last_modified_by)
        {
            var items = Where(nameof(organisation_data__originatorDbModel.last_modified_by), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), last_modified_by).Results();
			return items;
        }
 
        public IEnumerable<organisation_data__originatorDbModel> FindBylast_modified(DateTime last_modified)
        {
            return FindBylast_modified(FindComparison.Equals, last_modified);
        }

        public IEnumerable<organisation_data__originatorDbModel> FindBylast_modified(FindComparison comparison, DateTime last_modified)
        {
            var items = Where(nameof(organisation_data__originatorDbModel.last_modified), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), last_modified).Results();
			return items;
        }
 
        public IEnumerable<organisation_data__originatorDbModel> FindBycreated(DateTime created)
        {
            return FindBycreated(FindComparison.Equals, created);
        }

        public IEnumerable<organisation_data__originatorDbModel> FindBycreated(FindComparison comparison, DateTime created)
        {
            var items = Where(nameof(organisation_data__originatorDbModel.created), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), created).Results();
			return items;
        }
 
        public IEnumerable<organisation_data__originatorDbModel> FindBycreated_by(string created_by)
        {
            return FindBycreated_by(FindComparison.Equals, created_by);
        }

        public IEnumerable<organisation_data__originatorDbModel> FindBycreated_by(FindComparison comparison, string created_by)
        {
            var items = Where(nameof(organisation_data__originatorDbModel.created_by), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), created_by).Results();
			return items;
        }


        public override organisation_data__originatorDbModel ToItem(DataRow row, bool skipBase)
        {
            var item = new organisation_data__originatorDbModel();
            item.id = GetInt64(row, "id");
            item.name = GetString(row, "name");
            item.alias = GetString(row, "alias");
            item.last_modified_by = GetString(row, "last_modified_by");
            item.last_modified = GetDateTime(row, "last_modified");
            item.created = GetDateTime(row, "created");
            item.created_by = GetString(row, "created_by");

            item.ResetDirty();
            return item;
        }

		public override TK ToItem<TK>(DataRow row, bool skipBase)
		{
            var item = new TK();
            item.id = GetInt64(row, "id");
            item.name = GetString(row, "name");
            item.alias = GetString(row, "alias");
            item.last_modified_by = GetString(row, "last_modified_by");
            item.last_modified = GetDateTime(row, "last_modified");
            item.created = GetDateTime(row, "created");
            item.created_by = GetString(row, "created_by");

			item.ResetDirty();
			return item as TK;
		}

    }
}