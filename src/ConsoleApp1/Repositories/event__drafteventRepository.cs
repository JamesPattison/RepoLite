//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Biomind.Data.Repositories.Base;
using Biomind.Data.Models;
using Biomind.Data.Models.Base;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Xml;
using MySqlConnector;

namespace Biomind.Data.Repositories
{
    public partial interface Ievent__drafteventRepository : IPkRepository<event__drafteventDbModel>
    {
		event__drafteventDbModel Get(long id);
		IEnumerable<event__drafteventDbModel> Get(List<long> ids);
		IEnumerable<event__drafteventDbModel> Get(params long[] ids);
		
        long GetMaxId();
		bool Delete(long id);
		bool Delete(IEnumerable<long> ids);

        bool DeleteBysubject(string subject);
        bool DeleteBybody(string body);
        bool DeleteByoriginator(string originator);
        bool DeleteBystatus(int status);
        bool DeleteBysource_id(string source_id);
        bool DeleteBydata_source_id(long data_source_id);
        bool DeleteBytimestamp(byte[] timestamp);
        bool DeleteByreceived_timestamp(byte[] received_timestamp);
        bool DeleteByraw_file_path(string raw_file_path);

        IEnumerable<event__drafteventDbModel> Search(
            string subject = null,
            string body = null,
            string originator = null,
            int? status = null,
            string source_id = null,
            long? data_source_id = null,
            byte[] timestamp = null,
            byte[] received_timestamp = null,
            string raw_file_path = null);

        IEnumerable<event__drafteventDbModel> FindBysubject(string subject);
        IEnumerable<event__drafteventDbModel> FindBysubject(FindComparison comparison, string subject);
        IEnumerable<event__drafteventDbModel> FindBybody(string body);
        IEnumerable<event__drafteventDbModel> FindBybody(FindComparison comparison, string body);
        IEnumerable<event__drafteventDbModel> FindByoriginator(string originator);
        IEnumerable<event__drafteventDbModel> FindByoriginator(FindComparison comparison, string originator);
        IEnumerable<event__drafteventDbModel> FindBystatus(int status);
        IEnumerable<event__drafteventDbModel> FindBystatus(FindComparison comparison, int status);
        IEnumerable<event__drafteventDbModel> FindBysource_id(string source_id);
        IEnumerable<event__drafteventDbModel> FindBysource_id(FindComparison comparison, string source_id);
        IEnumerable<event__drafteventDbModel> FindBydata_source_id(long data_source_id);
        IEnumerable<event__drafteventDbModel> FindBydata_source_id(FindComparison comparison, long data_source_id);
        IEnumerable<event__drafteventDbModel> FindBytimestamp(byte[] timestamp);
        IEnumerable<event__drafteventDbModel> FindBytimestamp(FindComparison comparison, byte[] timestamp);
        IEnumerable<event__drafteventDbModel> FindByreceived_timestamp(byte[] received_timestamp);
        IEnumerable<event__drafteventDbModel> FindByreceived_timestamp(FindComparison comparison, byte[] received_timestamp);
        IEnumerable<event__drafteventDbModel> FindByraw_file_path(string raw_file_path);
        IEnumerable<event__drafteventDbModel> FindByraw_file_path(FindComparison comparison, string raw_file_path);
    }
    public partial class event__drafteventRepository : BaseRepository<event__drafteventDbModel>, Ievent__drafteventRepository
    {

        partial void InitializeExtension();
        
		public event__drafteventRepository(string connectionString) : this(connectionString, exception => { }) { }
		public event__drafteventRepository(string connectionString, Action<Exception> logMethod) 
			: base(connectionString, logMethod, event__drafteventDbModel.Schema, event__drafteventDbModel.TableName, event__drafteventDbModel.Columns)
		{
			InitializeExtension();
		}


        public event__drafteventDbModel Get(long id)
        {
            return Where("id", Comparison.Equals, id).Results().FirstOrDefault();
        }

        public IEnumerable<event__drafteventDbModel> Get(List<long> ids)
        {
            var toReturn = new List<event__drafteventDbModel>();
            if (!ids.Any()) return toReturn;
            toReturn.AddRange(Where("id", Comparison.In, ids).Results()); 
            return toReturn;
        }

        public IEnumerable<event__drafteventDbModel> Get(params long[] ids)
        {
            return Get(ids.ToList());
        }

        public long GetMaxId()
        {
            using (var cn = new MySqlConnection(ConnectionString))
            {
                using (var cmd = CreateCommand(cn, "SELECT ISNULL(MAX(id), 0) FROM event__draftevent"))
                {
                    cn.Open();
                    return (long)cmd.ExecuteScalar();
                }
            }
        }
        public override IEnumerable<event__drafteventDbModel> GetAll()
        {
            var query = $@"SELECT * FROM `democlient`.`event__draftevent`
";
            return ExecuteSql(query);
        }



       public override bool Create(event__drafteventDbModel item)
        {
            //Validation
            if (item == null)
                return false;

            var validationErrors = item.Validate();
            if (validationErrors.Any())
                throw new ValidationException(validationErrors);

            var createdKeys = BaseCreate(
                    item.id,
                    item.subject,
                    item.body,
                    item.originator,
                    item.status,
                    item.source_id,
                    item.data_source_id,
                    item.timestamp,
                    item.received_timestamp,
                    item.raw_file_path);
            if (createdKeys.Count != event__drafteventDbModel.Columns.Count(x => x.PrimaryKey))
                return false;

            item.id = (long)createdKeys[nameof(event__drafteventDbModel.id)];
            item.ResetDirty();

            return true;
        }

        public override bool BulkCreate(params event__drafteventDbModel[] items)
        {
            if (!items.Any())
                return false;

            var validationErrors = items.SelectMany(x => x.Validate()).ToList();
            if (validationErrors.Any())
                throw new ValidationException(validationErrors);

			var dt = new DataTable();
			foreach (var mergeColumn in event__drafteventDbModel.Columns.Where(x => !x.PrimaryKey || x.PrimaryKey && !x.Identity))
				dt.Columns.Add(mergeColumn.ColumnName, mergeColumn.ValueType);

			foreach (var item in items)
			{
				dt.Rows.Add(
                    item.id,
                    item.subject,
                    item.body,
                    item.originator,
                    item.status,
                    item.source_id,
                    item.data_source_id,
                    item.timestamp,
                    item.received_timestamp,
                    item.raw_file_path);
			}

			if (BulkInsert(dt))
			{
				return true;
			}
			return false;
        }
        public override bool BulkCreate(List<event__drafteventDbModel> items)
        {
            return BulkCreate(items.ToArray());
        }

        public bool Update(event__drafteventDbModel item, bool clearDirty = true)
        {
            if (item == null)
                return false;

            var validationErrors = item.Validate();
            if (validationErrors.Any())
                throw new ValidationException(validationErrors);

            var success = BaseUpdate(item.DirtyColumns, 
                item.id, item.subject, item.body, item.originator, item.status, 
				item.source_id, item.data_source_id, item.timestamp, item.received_timestamp, item.raw_file_path);

            if (success && clearDirty)
                item.ResetDirty();

            return success;
        }


 
 
       public bool Delete(event__drafteventDbModel item)
        {
            if (item == null)
                return false;

            var deleteColumn = new DeleteColumn("id", item.id, MySqlDbType.Int64);

            if (BaseDelete(deleteColumn, out var items))
            {
                return true;
            }
            return false;
        }
        public bool Delete(IEnumerable<event__drafteventDbModel> items)
        {
            if (!items.Any()) return true;
            var deleteValues = new List<object>();
            foreach (var item in items)
            {
                deleteValues.Add(item.id);
            }

            if (BaseDelete("id", deleteValues))
            {
                return true;
            }
            return false;
        }

        public bool Delete(long id)
        {
            if (Delete(new event__drafteventDbModel { id = id }))
            {
                return true;
            }
            return false;
        }

        public bool Delete(IEnumerable<long> ids)
        {
            if (!ids.Any()) return true;
            var deleteValues = new List<object>();
            deleteValues.AddRange(ids.Cast<object>());
            if (BaseDelete("id", deleteValues))
            {
                return true;
            }
            return false;
        }
 
        public bool DeleteBysubject(string subject)
        {
            if (BaseDelete(new DeleteColumn(nameof(event__drafteventDbModel.subject), subject, MySqlDbType.VarChar), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteBybody(string body)
        {
            if (BaseDelete(new DeleteColumn(nameof(event__drafteventDbModel.body), body, MySqlDbType.LongText), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteByoriginator(string originator)
        {
            if (BaseDelete(new DeleteColumn(nameof(event__drafteventDbModel.originator), originator, MySqlDbType.VarChar), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteBystatus(int status)
        {
            if (BaseDelete(new DeleteColumn(nameof(event__drafteventDbModel.status), status, MySqlDbType.Int32), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteBysource_id(string source_id)
        {
            if (BaseDelete(new DeleteColumn(nameof(event__drafteventDbModel.source_id), source_id, MySqlDbType.VarChar), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteBydata_source_id(long data_source_id)
        {
            if (BaseDelete(new DeleteColumn(nameof(event__drafteventDbModel.data_source_id), data_source_id, MySqlDbType.Int64), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteBytimestamp(byte[] timestamp)
        {
            if (BaseDelete(new DeleteColumn(nameof(event__drafteventDbModel.timestamp), timestamp, MySqlDbType.Timestamp), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteByreceived_timestamp(byte[] received_timestamp)
        {
            if (BaseDelete(new DeleteColumn(nameof(event__drafteventDbModel.received_timestamp), received_timestamp, MySqlDbType.Timestamp), out var items))
            {
                return true;
			}
			return false;
		}
 
        public bool DeleteByraw_file_path(string raw_file_path)
        {
            if (BaseDelete(new DeleteColumn(nameof(event__drafteventDbModel.raw_file_path), raw_file_path, MySqlDbType.VarChar), out var items))
            {
                return true;
			}
			return false;
		}


        public bool Merge(List<event__drafteventDbModel> items)
        {

            var mergeTable = new List<object[]>();
            var updates = items.Where(x => x.id != default).GroupBy(x => x.id).Select(x => x.Last());
            foreach (var item in items.Where(x => x.id == default).Union(updates))
            {
                mergeTable.Add(new object[]
                {
					item.id,
					item.subject, item.DirtyColumns.Contains("subject"),
					item.body, item.DirtyColumns.Contains("body"),
					item.originator, item.DirtyColumns.Contains("originator"),
					item.status, item.DirtyColumns.Contains("status"),
					item.source_id, item.DirtyColumns.Contains("source_id"),
					item.data_source_id, item.DirtyColumns.Contains("data_source_id"),
					item.timestamp, item.DirtyColumns.Contains("timestamp"),
					item.received_timestamp, item.DirtyColumns.Contains("received_timestamp"),
					item.raw_file_path, item.DirtyColumns.Contains("raw_file_path")

                });
            }
            return BaseMerge(mergeTable);
        }
        public bool Merge(string csvPath)
        {
            var mergeTable = new List<object[]>();
            using (var sr = new StreamReader(csvPath))
            {
                var line = sr.ReadLine();
                if (line == null) return false;

                var firstItem = line.Split(',')[0];
                if (firstItem == "id")
                {
                    //CSV has headers
                    //Run to the next line
                    line = sr.ReadLine();
                    if (line == null) return true;
                }

                do
                {
                    var blocks = line.Split(',');
                    mergeTable.Add(new object[]
                    {
                        Cast<long>(blocks[0]),
                        Cast<long>(blocks[1]), true,
                    });
                } while ((line = sr.ReadLine()) != null);


                return BaseMerge(mergeTable);
            }
        }


        public IEnumerable<event__drafteventDbModel> Search(
            string subject = null,
            string body = null,
            string originator = null,
            int? status = null,
            string source_id = null,
            long? data_source_id = null,
            byte[] timestamp = null,
            byte[] received_timestamp = null,
            string raw_file_path = null)
        {
            var queries = new List<QueryItem>();

            if (subject != null)
            queries.Add(new QueryItem(nameof(event__drafteventDbModel.subject), subject));
            if (body != null)
            queries.Add(new QueryItem(nameof(event__drafteventDbModel.body), body));
            if (originator != null)
            queries.Add(new QueryItem(nameof(event__drafteventDbModel.originator), originator));
            if (status.HasValue)
            queries.Add(new QueryItem(nameof(event__drafteventDbModel.status), status));
            if (source_id != null)
            queries.Add(new QueryItem(nameof(event__drafteventDbModel.source_id), source_id));
            if (data_source_id.HasValue)
            queries.Add(new QueryItem(nameof(event__drafteventDbModel.data_source_id), data_source_id));
            if (timestamp != null)
            queries.Add(new QueryItem(nameof(event__drafteventDbModel.timestamp), timestamp));
            if (received_timestamp != null)
            queries.Add(new QueryItem(nameof(event__drafteventDbModel.received_timestamp), received_timestamp));
            if (raw_file_path != null)
            queries.Add(new QueryItem(nameof(event__drafteventDbModel.raw_file_path), raw_file_path));

            return BaseSearch(queries);
        }


 
        public IEnumerable<event__drafteventDbModel> FindBysubject(string subject)
        {
            return FindBysubject(FindComparison.Equals, subject);
        }

        public IEnumerable<event__drafteventDbModel> FindBysubject(FindComparison comparison, string subject)
        {
            var items = Where(nameof(event__drafteventDbModel.subject), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), subject).Results();
			return items;
        }
 
        public IEnumerable<event__drafteventDbModel> FindBybody(string body)
        {
            return FindBybody(FindComparison.Equals, body);
        }

        public IEnumerable<event__drafteventDbModel> FindBybody(FindComparison comparison, string body)
        {
            var items = Where(nameof(event__drafteventDbModel.body), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), body).Results();
			return items;
        }
 
        public IEnumerable<event__drafteventDbModel> FindByoriginator(string originator)
        {
            return FindByoriginator(FindComparison.Equals, originator);
        }

        public IEnumerable<event__drafteventDbModel> FindByoriginator(FindComparison comparison, string originator)
        {
            var items = Where(nameof(event__drafteventDbModel.originator), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), originator).Results();
			return items;
        }
 
        public IEnumerable<event__drafteventDbModel> FindBystatus(int status)
        {
            return FindBystatus(FindComparison.Equals, status);
        }

        public IEnumerable<event__drafteventDbModel> FindBystatus(FindComparison comparison, int status)
        {
            var items = Where(nameof(event__drafteventDbModel.status), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), status).Results();
			return items;
        }
 
        public IEnumerable<event__drafteventDbModel> FindBysource_id(string source_id)
        {
            return FindBysource_id(FindComparison.Equals, source_id);
        }

        public IEnumerable<event__drafteventDbModel> FindBysource_id(FindComparison comparison, string source_id)
        {
            var items = Where(nameof(event__drafteventDbModel.source_id), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), source_id).Results();
			return items;
        }
 
        public IEnumerable<event__drafteventDbModel> FindBydata_source_id(long data_source_id)
        {
            return FindBydata_source_id(FindComparison.Equals, data_source_id);
        }

        public IEnumerable<event__drafteventDbModel> FindBydata_source_id(FindComparison comparison, long data_source_id)
        {
            var items = Where(nameof(event__drafteventDbModel.data_source_id), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), data_source_id).Results();
			return items;
        }
 
        public IEnumerable<event__drafteventDbModel> FindBytimestamp(byte[] timestamp)
        {
            return FindBytimestamp(FindComparison.Equals, timestamp);
        }

        public IEnumerable<event__drafteventDbModel> FindBytimestamp(FindComparison comparison, byte[] timestamp)
        {
            var items = Where(nameof(event__drafteventDbModel.timestamp), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), timestamp).Results();
			return items;
        }
 
        public IEnumerable<event__drafteventDbModel> FindByreceived_timestamp(byte[] received_timestamp)
        {
            return FindByreceived_timestamp(FindComparison.Equals, received_timestamp);
        }

        public IEnumerable<event__drafteventDbModel> FindByreceived_timestamp(FindComparison comparison, byte[] received_timestamp)
        {
            var items = Where(nameof(event__drafteventDbModel.received_timestamp), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), received_timestamp).Results();
			return items;
        }
 
        public IEnumerable<event__drafteventDbModel> FindByraw_file_path(string raw_file_path)
        {
            return FindByraw_file_path(FindComparison.Equals, raw_file_path);
        }

        public IEnumerable<event__drafteventDbModel> FindByraw_file_path(FindComparison comparison, string raw_file_path)
        {
            var items = Where(nameof(event__drafteventDbModel.raw_file_path), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), raw_file_path).Results();
			return items;
        }


        public override event__drafteventDbModel ToItem(DataRow row, bool skipBase)
        {
            var item = new event__drafteventDbModel();
            item.id = GetInt64(row, "id");
            item.subject = GetString(row, "subject");
            item.body = GetString(row, "body");
            item.originator = GetString(row, "originator");
            item.status = GetInt32(row, "status");
            item.source_id = GetString(row, "source_id");
            item.data_source_id = GetNullableInt64(row, "data_source_id");
            item.timestamp = GetByteArray(row, "timestamp");
            item.received_timestamp = GetByteArray(row, "received_timestamp");
            item.raw_file_path = GetString(row, "raw_file_path");

            item.ResetDirty();
            return item;
        }

		public override TK ToItem<TK>(DataRow row, bool skipBase)
		{
            var item = new TK();
            item.id = GetInt64(row, "id");
            item.subject = GetString(row, "subject");
            item.body = GetString(row, "body");
            item.originator = GetString(row, "originator");
            item.status = GetInt32(row, "status");
            item.source_id = GetString(row, "source_id");
            item.data_source_id = GetNullableInt64(row, "data_source_id");
            item.timestamp = GetByteArray(row, "timestamp");
            item.received_timestamp = GetByteArray(row, "received_timestamp");
            item.raw_file_path = GetString(row, "raw_file_path");

			item.ResetDirty();
			return item as TK;
		}

    }
}