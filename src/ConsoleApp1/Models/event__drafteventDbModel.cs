//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Xml;
using Biomind.Data.Models.Base;
using MySqlConnector;

namespace Biomind.Data.Models
{
	public partial class event__drafteventDbModel : BaseModel
	{
		public override string EntityName => "event__draftevent";

		public static string CacheKey(long id) => $"event__draftevent_{id}";
        protected long _id;
        protected string _subject;
        protected string _body;
        protected string _originator;
        protected int _status;
        protected string _source_id;
        protected long? _data_source_id;
        protected byte[] _timestamp;
        protected byte[] _received_timestamp;
        protected string _raw_file_path;

		public long id
		{
			get => _id;
			set => SetValue(ref _id, value);
		}
		public string subject
		{
			get => _subject;
			set => SetValue(ref _subject, value);
		}
		public string body
		{
			get => _body;
			set => SetValue(ref _body, value);
		}
		public string originator
		{
			get => _originator;
			set => SetValue(ref _originator, value);
		}
		public int status
		{
			get => _status;
			set => SetValue(ref _status, value);
		}
		public string source_id
		{
			get => _source_id;
			set => SetValue(ref _source_id, value);
		}
		public long? data_source_id
		{
			get => _data_source_id;
			set => SetValue(ref _data_source_id, value);
		}
		public byte[] timestamp
		{
			get => _timestamp;
			set => SetValue(ref _timestamp, value);
		}
		public byte[] received_timestamp
		{
			get => _received_timestamp;
			set => SetValue(ref _received_timestamp, value);
		}
		public string raw_file_path
		{
			get => _raw_file_path;
			set => SetValue(ref _raw_file_path, value);
		}
		
		public event__drafteventDbModel() { }
		public event__drafteventDbModel(
            long id,
            string subject,
            string body,
            string originator,
            int status,
            string source_id,
            long? data_source_id,
            byte[] timestamp,
            byte[] received_timestamp,
            string raw_file_path)
		{
            _id = id;
            _subject = subject;
            _body = body;
            _originator = originator;
            _status = status;
            _source_id = source_id;
            _data_source_id = data_source_id;
            _timestamp = timestamp;
            _received_timestamp = received_timestamp;
            _raw_file_path = raw_file_path;
		}

		public override IBaseModel SetValues(DataRow row, string propertyPrefix)
		{
            _id = row.GetValue<long>($"{propertyPrefix}id") ?? default(long);
            _subject = row.GetText($"{propertyPrefix}subject");
            _body = row.GetText($"{propertyPrefix}body");
            _originator = row.GetText($"{propertyPrefix}originator");
            _status = row.GetValue<int>($"{propertyPrefix}status") ?? default(int);
            _source_id = row.GetText($"{propertyPrefix}source_id");
            _data_source_id = row.GetValue<long>($"{propertyPrefix}data_source_id");
            _timestamp = (byte[])row[$"{propertyPrefix}timestamp"];
            _received_timestamp = (byte[])row[$"{propertyPrefix}received_timestamp"];
            _raw_file_path = row.GetText($"{propertyPrefix}raw_file_path");
			return this;
		}

		public override List<ValidationError> Validate()
		{
			var validationErrors = new List<ValidationError>();

			if (!string.IsNullOrEmpty(subject) && subject.Length > 4000)
				validationErrors.Add(new ValidationError(nameof(subject), "Max length is 4000"));

			if (!string.IsNullOrEmpty(body) && body.Length > 4294967295)
				validationErrors.Add(new ValidationError(nameof(body), "Max length is 4294967295"));

			if (originator == null)
				validationErrors.Add(new ValidationError(nameof(originator), "Value cannot be null"));
			if (!string.IsNullOrEmpty(originator) && originator.Length > 255)
				validationErrors.Add(new ValidationError(nameof(originator), "Max length is 255"));

			if (!string.IsNullOrEmpty(source_id) && source_id.Length > 128)
				validationErrors.Add(new ValidationError(nameof(source_id), "Max length is 128"));

			if (timestamp == null)
				validationErrors.Add(new ValidationError(nameof(timestamp), "Value cannot be null"));

			if (received_timestamp == null)
				validationErrors.Add(new ValidationError(nameof(received_timestamp), "Value cannot be null"));

			if (!string.IsNullOrEmpty(raw_file_path) && raw_file_path.Length > 512)
				validationErrors.Add(new ValidationError(nameof(raw_file_path), "Max length is 512"));

			return validationErrors;
		}

		public static string Schema = "democlient";
		public static string TableName = "event__draftevent";
		public static List<ColumnDefinition> Columns => new List<ColumnDefinition>
		{
			new ColumnDefinition("id", typeof(long), "[bigint]", MySqlDbType.Int64, false, true, true),
			new ColumnDefinition("subject", typeof(string), "[varchar](4000)", MySqlDbType.VarChar, true, false, false),
			new ColumnDefinition("body", typeof(string), "[longtext]", MySqlDbType.LongText, true, false, false),
			new ColumnDefinition("originator", typeof(string), "[varchar](255)", MySqlDbType.VarChar, false, false, false),
			new ColumnDefinition("status", typeof(int), "[int]", MySqlDbType.Int32, false, false, false),
			new ColumnDefinition("source_id", typeof(string), "[varchar](128)", MySqlDbType.VarChar, true, false, false),
			new ColumnDefinition("data_source_id", typeof(long), "[bigint]", MySqlDbType.Int64, true, false, false),
			new ColumnDefinition("timestamp", typeof(byte[]), "[timestamp]", MySqlDbType.Timestamp, false, false, false),
			new ColumnDefinition("received_timestamp", typeof(byte[]), "[timestamp]", MySqlDbType.Timestamp, false, false, false),
			new ColumnDefinition("raw_file_path", typeof(string), "[varchar](512)", MySqlDbType.VarChar, true, false, false),

		};
	}
}

