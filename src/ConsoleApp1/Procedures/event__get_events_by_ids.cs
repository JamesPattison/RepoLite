//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Xml;
using MySqlConnector;

namespace Biomind.Data.Procedures
{
    public partial class Procedures
    {
        public record event__get_events_by_ids___temp_event_ids_Param(long event_id);

        public record event__get_events_by_ids_Result(
            IEnumerable<event__get_events_by_ids_Result_Events> Events,
            IEnumerable<event__get_events_by_ids_Result_Set2> Set2,
            IEnumerable<event__get_events_by_ids_Result_Set3> Set3,
            IEnumerable<event__get_events_by_ids_Result_Set4> Set4,
            IEnumerable<event__get_events_by_ids_Result_Set5> Set5,
            IEnumerable<event__get_events_by_ids_Result_Set6> Set6,
            IEnumerable<event__get_events_by_ids_Result_Set7> Set7);

        public record event__get_events_by_ids_Result_Events(System.Int64 EventId,System.String Subject,System.String Body,System.Int64 OriginatorId,System.String OriginatorName,System.String Synopsis,System.Int32 Status,System.DateTime Timestamp,System.DateTime ReceivedTimestamp,System.Int32 Significance,System.Int32 UserStatusEnum,System.String SourceId,System.String DataSourceCode);
        public record event__get_events_by_ids_Result_Set2(System.Int64 EventId,System.Int64 CategoryId,System.String Code,System.Int16 ColourNumber,System.String Name,System.Int32 DisplayOrder);
        public record event__get_events_by_ids_Result_Set3(System.Int64 EventId,System.Int64 EventAttachmentId,System.String FilePath,System.String FileName,System.String ContentType,System.Int64 FileSizeBytes);
        public record event__get_events_by_ids_Result_Set4(System.Int64 EventId,System.Int64 EntityId,System.String EntityDefinitionCode,System.String Code,System.String Name,System.Int32 DisplayOrder);
        public record event__get_events_by_ids_Result_Set5(System.Int64 EventId,System.String CategoriesMarkup,System.String EntitiesMarkup);
        public record event__get_events_by_ids_Result_Set6(System.Int64 EventId,System.Int32 ActionCode,System.String Text,System.String Url,System.Int32 Operation);
        public record event__get_events_by_ids_Result_Set7(System.Int64 EventId,System.String Permission);



        public event__get_events_by_ids_Result event__get_events_by_ids(
			System.String caller_id,
			IEnumerable<event__get_events_by_ids___temp_event_ids_Param> __temp_event_ids
        ) 
        {
            using var conn = new MySqlConnection(_connectionString);

            conn.Open();
      
            var temporaryTablesSqls = new List<string>();
            temporaryTablesSqls.Add("drop temporary table if exists __temp_event_ids; create temporary table __temp_event_ids (event_id bigint)");
            if (__temp_event_ids.Any())
                temporaryTablesSqls.Add(ToMySql(__temp_event_ids));
            var temporaryTableSql = temporaryTablesSqls.Any() ? string.Join(";", temporaryTablesSqls) : null;

            new MySqlCommand(temporaryTableSql, conn).ExecuteNonQuery();

            using var command = new MySqlCommand("event__get_events_by_ids", conn)
            {
                CommandType = CommandType.StoredProcedure
            };

            command.Parameters.AddWithValue("caller_id", caller_id);

            var da = new MySqlDataAdapter(command);
            var ds = new DataSet();
            da.Fill(ds);

            if (ds.Tables.Count != 7) throw new Exception("Return count differs to expected. Please regenerate");

            
            var Events_table = ds.Tables[0];

            var EventsResult = from row in Events_table.AsEnumerable()
                select new event__get_events_by_ids_Result_Events(
                    row.Field<System.Int64>("EventId"),
                    row.Field<System.String>("Subject"),
                    row.Field<System.String>("Body"),
                    row.Field<System.Int64>("OriginatorId"),
                    row.Field<System.String>("OriginatorName"),
                    row.Field<System.String>("Synopsis"),
                    row.Field<System.Int32>("Status"),
                    row.Field<System.DateTime>("Timestamp"),
                    row.Field<System.DateTime>("ReceivedTimestamp"),
                    row.Field<System.Int32>("Significance"),
                    row.Field<System.Int32>("UserStatusEnum"),
                    row.Field<System.String>("SourceId"),
                    row.Field<System.String>("DataSourceCode")
                );
            
            var Set2_table = ds.Tables[1];

            var Set2Result = from row in Set2_table.AsEnumerable()
                select new event__get_events_by_ids_Result_Set2(
                    row.Field<System.Int64>("EventId"),
                    row.Field<System.Int64>("CategoryId"),
                    row.Field<System.String>("Code"),
                    row.Field<System.Int16>("ColourNumber"),
                    row.Field<System.String>("Name"),
                    row.Field<System.Int32>("DisplayOrder")
                );
            
            var Set3_table = ds.Tables[2];

            var Set3Result = from row in Set3_table.AsEnumerable()
                select new event__get_events_by_ids_Result_Set3(
                    row.Field<System.Int64>("EventId"),
                    row.Field<System.Int64>("EventAttachmentId"),
                    row.Field<System.String>("FilePath"),
                    row.Field<System.String>("FileName"),
                    row.Field<System.String>("ContentType"),
                    row.Field<System.Int64>("FileSizeBytes")
                );
            
            var Set4_table = ds.Tables[3];

            var Set4Result = from row in Set4_table.AsEnumerable()
                select new event__get_events_by_ids_Result_Set4(
                    row.Field<System.Int64>("EventId"),
                    row.Field<System.Int64>("EntityId"),
                    row.Field<System.String>("EntityDefinitionCode"),
                    row.Field<System.String>("Code"),
                    row.Field<System.String>("Name"),
                    row.Field<System.Int32>("DisplayOrder")
                );
            
            var Set5_table = ds.Tables[4];

            var Set5Result = from row in Set5_table.AsEnumerable()
                select new event__get_events_by_ids_Result_Set5(
                    row.Field<System.Int64>("EventId"),
                    row.Field<System.String>("CategoriesMarkup"),
                    row.Field<System.String>("EntitiesMarkup")
                );
            
            var Set6_table = ds.Tables[5];

            var Set6Result = from row in Set6_table.AsEnumerable()
                select new event__get_events_by_ids_Result_Set6(
                    row.Field<System.Int64>("EventId"),
                    row.Field<System.Int32>("ActionCode"),
                    row.Field<System.String>("Text"),
                    row.Field<System.String>("Url"),
                    row.Field<System.Int32>("Operation")
                );
            
            var Set7_table = ds.Tables[6];

            var Set7Result = from row in Set7_table.AsEnumerable()
                select new event__get_events_by_ids_Result_Set7(
                    row.Field<System.Int64>("EventId"),
                    row.Field<System.String>("Permission")
                );

            return new event__get_events_by_ids_Result(
                EventsResult,
                Set2Result,
                Set3Result,
                Set4Result,
                Set5Result,
                Set6Result,
                Set7Result
);

        }
    
        public static string ToMySql(IEnumerable<event__get_events_by_ids___temp_event_ids_Param> src)
        {
            var sb = new StringBuilder().Append("insert into __temp_event_ids values ");
            var prependComma = false;
            foreach (event__get_events_by_ids___temp_event_ids_Param s in src)
            {
                if( prependComma)
                    sb.Append(",");
                
                sb.Append("(").AppendJoin(",",SqlDataTypesHelper.PrepareDataForInlineQuery(s.event_id, "bigint")).Append(")");
                prependComma = true;
            }
            return sb.ToString();
        }

        public static class SqlDataTypesHelper
        {
            public static string PrepareDataForInlineQuery(object src, string columnType)
            {
                if (src == null)
                    return "null";
                if (columnType.ToLower().Contains("varchar") || columnType.ToLower().Contains("text") || columnType.ToLower().Contains("char("))
                    return $"'{MySqlHelper.EscapeString(src.ToString())}'";
                else if (columnType.ToLower().Contains("date") || columnType.ToLower().Contains("timestamp"))
                    return $"'{((DateTime)src):yyyy-MM-dd HH:mm:ss.FFFFFFF}'";
                return MySqlHelper.EscapeString(src.ToString());
            }
        }

    }
}

