<#@ parameter type="RepoLite.Common.Options.GenerationOptions" name="generationSettings" #>
<#@ parameter type="RepoLite.Common.Models.RepositoryGenerationObject" name="generationObject" #>
<#@ import namespace="RepoLite.Common.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="RepoLite.Common.Models" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="RepoLite.Common" #>
<#@ import namespace="RepoLite.GeneratorEngine.Generators.CSharp.SQLServer.Pk.Helpers" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data" #>
<# var pk = generationObject.Table.PrimaryKeys.FirstOrDefault();#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Xml;
using <#= generationSettings.ModelGenerationNamespace #>.Base;

namespace <#= generationSettings.ModelGenerationNamespace #>
{
<# if (generationObject.InheritedTable != null) { #>
	public <#= generationSettings.GenerateSealedObjects ? "sealed " : ""#>partial class <#= generationObject.Table.ClassName #> : <#= generationObject.InheritedTable.ClassName #>
<# } #>
<# if (generationObject.InheritedTable == null) { #>
	public <#= generationSettings.GenerateSealedObjects ? "sealed " : ""#>partial class <#= generationObject.Table.ClassName #> : BaseModel
<# } #>
	{
		public override string EntityName => "<#= generationObject.Table.DbTableName #>";

		public <#= generationObject.InheritedTable != null? "new ": "" #>static string CacheKey(<#= pk.DataTypeString #> id) => $"<#= generationObject.Table.DbTableName #>_{id}";
<# foreach (var column in generationObject.Table.Columns.Where(x => x.DbTableName == generationObject.Table.DbTableName)) { #>
<# if (generationObject.InheritedTable != null && column.PrimaryKey) continue; #>
        protected <#= column.DataTypeString #><#= Common.Helpers.IsCSharpNullable(column.DataTypeString) && column.IsNullable ? "?" : "" #> _<#= column.FieldName #>;
<# } #>

<# foreach (var column in generationObject.Table.Columns.Where(x => x.DbTableName == generationObject.Table.DbTableName)) { #>
<# if (generationObject.InheritedTable != null && column.PrimaryKey) continue; #>
		public <#= column.DataTypeString #><#= Common.Helpers.IsCSharpNullable(column.DataTypeString) && column.IsNullable ? "?" : "" #> <#= column.DbColumnName #>
		{
			get => _<#= column.FieldName #>;
			set => SetValue(ref _<#= column.FieldName #>, value);
		}
<# if (column.ForeignKey) {#>
        /// <summary>
        /// Nothing is done with this, it's merely there to hold data IF you wish to populate it
        /// </summary>
        public <#= column.ForeignKeyTargetTable.ToModelName(generationSettings.ModelClassNameFormat) #> <#= column.DbColumnName.TrimEnd('d', 'I')#>{ get; set; }
<# } #>
<# } #>
		
		public <#= generationObject.Table.ClassName #>() { }
		public <#= generationObject.Table.ClassName #>(
<# foreach (var column in generationObject.Table.Columns) { #>
            <#= column.DataType != typeof(XmlDocument) ? column.DataTypeString: "string" #><#= Helpers.IsCSharpNullable(column.DataTypeString) && column.IsNullable ? "?" : "" #> <#= column.FieldName #><#= column == generationObject.Table.Columns.Last()? ")": ","#>
<# } #>
		{
<# foreach (var column in generationObject.Table.Columns) { #>
            _<#= column.FieldName #> = <#= column.FieldName #>;
<# } #>
		}

		public override IBaseModel SetValues(DataRow row, string propertyPrefix)
		{
<# if (generationObject.InheritedTable != null) {#>
            base.SetValues(row, propertyPrefix);
<# } #>
<# foreach (var column in generationObject.Table.Columns) { #>
<# if (generationObject.InheritedTable != null && column.PrimaryKey) continue; #>
<# if (column.DataType == typeof(string)) { #>
            _<#= column.FieldName #> = row.GetText($"{propertyPrefix}<#= column.PropertyName #>");
<# } #>
<# else if (column.DataType == typeof(byte)) { #>
            _<#= column.FieldName #> = (byte)row[$"{propertyPrefix}<#= column.PropertyName #>"];
<# } #>
<# else if (column.DataType == typeof(byte?)) { #>
            _<#= column.FieldName #> = (byte?)row[$"{propertyPrefix}<#= column.PropertyName #>"];
<# } #>
<# else if (column.DataType == typeof(byte[])) { #>
            _<#= column.FieldName #> = (byte[])row[$"{propertyPrefix}<#= column.PropertyName #>"];
<# } #>
<# else if (column.DataType == typeof(XmlDocument)) { #>
            _<#= column.FieldName #> = new XmlDocument{InnerXml = row.GetText($"{propertyPrefix}<#= column.PropertyName #>")};
<# } #>
<# else { #>
            _<#= column.FieldName #> = row.GetValue<<#= column.DataTypeString #>>($"{propertyPrefix}<#= column.PropertyName #>")<#= Helpers.IsCSharpNullable(column.DataTypeString) && column.IsNullable ? ";" : $" ?? default({column.DataTypeString});" #>
<# } #>
<# } #>
			return this;
		}

		public override List<ValidationError> Validate()
		{
			var validationErrors = new List<ValidationError>();
<# if (generationObject.InheritedTable != null) {#>
            validationErrors.AddRange(base.Validate());
<# } #>

<# foreach (var column in generationObject.Table.Columns) { #>
<# if (column.DataType == typeof(string)) { #>
<#= StringValidation(column)#>
<# } else if (column.DataType == typeof(byte[])) { #>
<#= ByteArrayValidation(column)#>
<# } else { #>
<#= ElseValidation(column) #><# } #>
<# } #>
			return validationErrors;
		}

		public <#= generationObject.InheritedTable != null? "new ": "" #>static string Schema = "<#= generationObject.Table.Schema #>";
		public <#= generationObject.InheritedTable != null? "new ": "" #>static string TableName = "<#= generationObject.Table.DbTableName #>";
		public <#= generationObject.InheritedTable != null? "new ": "" #>static List<ColumnDefinition> Columns => new List<ColumnDefinition>
		{
<#= Columns(generationObject.Table) #>
		};
	}
}

<#
   string StringValidation(Column column)
   {
       var sb = new StringBuilder();
       if (!column.IsNullable)
       {
           sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == null)");
           sb.AppendLine(
               $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be null\"));");
       }

       if (column.MaxLength > 0)
       {
           sb.AppendLine(
               $"{Helpers.Tab3}if (!string.IsNullOrEmpty({column.DbColumnName}) && {column.DbColumnName}.Length > {column.MaxLength})");
           sb.AppendLine(
               $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Max length is {column.MaxLength}\"));");
       }
       return sb.ToString();
   }

   string ByteArrayValidation(Column column)
   {
       var sb = new StringBuilder();
       if (!column.IsNullable)
       {
           sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == null)");
           sb.AppendLine(
               $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be null\"));");
       }

       if (column.MaxLength > 0)
       {
           sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} != null && {column.DbColumnName}.Length > {column.MaxLength})");
           sb.AppendLine(
               $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Binary array values exceed database size\"));");
       }
       return sb.ToString();
   }

   string ElseValidation(Column column)
   {
       var sb = new StringBuilder();
       switch (Activator.CreateInstance(column.DataType))
       {
           case decimal _:
               long maxValueForNum = 0;
               for (var i = 0; i < column.MaxIntLength; i++)
               {
                   maxValueForNum *= 10;
                   maxValueForNum += 9;
               }

               sb.AppendLine(
                   $"{Helpers.Tab3}if ({(column.IsNullable ? $"{column.DbColumnName}.HasValue && " : "")}Math.Floor({column.DbColumnName}{(column.IsNullable ? ".Value" : "")}) > {maxValueForNum})");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot exceed {maxValueForNum}\"));");
               sb.AppendLine(
                   $"{Helpers.Tab3}if ({(column.IsNullable ? $"{column.DbColumnName}.HasValue && " : "")}GetDecimalPlaces({column.DbColumnName}{(column.IsNullable ? ".Value" : "")}) > {column.MaxDecimalLength})");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot have more than {column.MaxDecimalLength} decimal place{(column.MaxDecimalLength > 1 ? "s" : "")}\"));");
               break;
           case DateTime _:
               sb.AppendLine($"{Helpers.Tab3}if ({column.PropertyName} == DateTime.MinValue)");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be default.\"));");
               break;
           case TimeSpan _:
               sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == TimeSpan.MinValue)");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be default.\"));");
               break;
           case DateTimeOffset _:
               sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == DateTimeOffset.MinValue)");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be default.\"));");
               break;
           case Guid _:
               sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == Guid.Empty)");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be default.\"));");
               break;
       }
       return sb.ToString();
   }

   string Columns(Table table)
   {
       var sb = new StringBuilder();
       foreach (var column in table.Columns)
       {
           var sqlPrecisionColumns = new[] { 35, 60, 62, 99, 106, 108, 122, 165, 167, 173, 175, 231, 239 };
           var colLengthVal = sqlPrecisionColumns.Contains(column.SqlDataTypeCode)
               ? $"({Math.Max(column.MaxLength, column.MaxIntLength)})"
               : string.Empty;

           if (SQLServerHelpers.GetDbType(column.SqlDataTypeCode) == SqlDbType.NVarChar && column.MaxLength == -1)
           {
               colLengthVal = "(MAX)";
           }
           sb.AppendLine(
               $"{Helpers.Tab3}new ColumnDefinition({(column.DbColumnName == nameof(column.DbColumnName) ? $"nameof({table.ClassName}.{column.DbColumnName})" : $"\"{column.DbColumnName}\"")}, " +
               $"typeof({column.DataTypeString}), " +
               $"\"[{column.SqlDataType}]{colLengthVal}\", " +
               $"SqlDbType.{SQLServerHelpers.GetDbType(column.SqlDataTypeCode)}, " +
               $"{column.IsNullable.ToString().ToLower()}, " +
               $"{column.PrimaryKey.ToString().ToLower()}, " +
               $"{column.IsIdentity.ToString().ToLower()}),");
       }
       return sb.ToString();
   }
#>