<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Common" #>
<#@ import namespace="Helpers" #>
<#@ parameter type="RepoLite.Common.Options.GenerationOptions" name="generationSettings" #>
<#@ parameter type="RepoLite.Common.Models.RepositoryGenerationObject" name="generationObject" #>
<# var pk = generationObject.Table.PrimaryKeys.FirstOrDefault();#>
    public partial interface I<#= generationObject.Table.RepositoryName #> : IPkRepository<<#=generationObject.Table.ClassName #>>
    {
		<#=generationObject.Table.ClassName #> Get(<#= pk.DataTypeString #> <#= pk.FieldName #>);
<# if (generationSettings.IncludeCaching) {#>
		<#=generationObject.Table.ClassName #> Get(<#= pk.DataTypeString #> <#= pk.FieldName #>, bool skipCache);
<# } #>
		IEnumerable<<#=generationObject.Table.ClassName #>> Get(List<<#= pk.DataTypeString #>> <#= pk.FieldName #>s);
<# if (generationSettings.IncludeCaching) {#>
		IEnumerable<<#=generationObject.Table.ClassName #>> Get(List<<#= pk.DataTypeString #>> <#= pk.FieldName #>s, bool skipCache);
<# } #>
		IEnumerable<<#=generationObject.Table.ClassName #>> Get(params <#= pk.DataTypeString #>[] <#= pk.FieldName #>s);
		
        <#= pk.DataTypeString #> GetMaxId();
		bool Delete(<#= pk.DataTypeString #> <#= pk.FieldName #>);
		bool Delete(IEnumerable<<#= pk.DataTypeString #>> <#= pk.FieldName #>s);

<#= TtHelpers.AppendInheritanceLogic(generationObject,(column, rgo) =>
                $"{Helpers.Tab2}bool DeleteBy{column.DbColumnName}({column.DataTypeString} {column.FieldName});\n")#>

        IEnumerable<<#=generationObject.Table.ClassName #>> Search(
<#= TtHelpers.AppendInheritanceLogic(generationObject,(column, rgo) =>
    {
        var isb = new StringBuilder();
        isb.Append(column.DataType != typeof(XmlDocument)
                ? $"{Helpers.Tab3}{column.DataTypeString}{(Helpers.IsCSharpNullable(column.DataTypeString) ? "?" : string.Empty)} {column.FieldName} = null"
                : $"{Helpers.Tab3}String {column.FieldName} = null");
        
        if (rgo.InheritedDependency != null || column != rgo.Table.Columns.Last())
                isb.AppendLine(",");
        
        return isb.ToString();
    })#>);

<#= TtHelpers.AppendInheritanceLogic(generationObject, (column, rgo) =>
    {
        var isb = new StringBuilder();
        isb.AppendLine(
            column.DataType != typeof(XmlDocument)
                ? $"{Helpers.Tab2}IEnumerable<{generationObject.Table.ClassName}> FindBy{column.PropertyName}({column.DataTypeString} {column.FieldName});"
                : $"{Helpers.Tab2}IEnumerable<{generationObject.Table.ClassName}> FindBy{column.PropertyName}(String {column.FieldName});");

        if (generationSettings.IncludeCaching)
        {
            isb.AppendLine(
                column.DataType != typeof(XmlDocument)
                    ? $"{Helpers.Tab2}IEnumerable<{generationObject.Table.ClassName}> FindBy{column.PropertyName}({column.DataTypeString} {column.FieldName}, bool skipCache);"
                    : $"{Helpers.Tab2}IEnumerable<{generationObject.Table.ClassName}> FindBy{column.PropertyName}(String {column.FieldName}, bool skipCache);");
        }
        
        isb.AppendLine(
            column.DataType != typeof(XmlDocument)
                ? $"{Helpers.Tab2}IEnumerable<{generationObject.Table.ClassName}> FindBy{column.PropertyName}(FindComparison comparison, {column.DataTypeString} {column.FieldName});"
                : $"{Helpers.Tab2}IEnumerable<{generationObject.Table.ClassName}> FindBy{column.PropertyName}(FindComparison comparison, String {column.FieldName});");


        if (generationSettings.IncludeCaching)
        {
            isb.AppendLine(
                column.DataType != typeof(XmlDocument)
                    ? $"{Helpers.Tab2}IEnumerable<{generationObject.Table.ClassName}> FindBy{column.PropertyName}(FindComparison comparison, {column.DataTypeString} {column.FieldName}, bool skipCache);"
                    : $"{Helpers.Tab2}IEnumerable<{generationObject.Table.ClassName}> FindBy{column.PropertyName}(FindComparison comparison, String {column.FieldName}, bool skipCache);");
        }
        return isb.ToString();
    })#>
    }