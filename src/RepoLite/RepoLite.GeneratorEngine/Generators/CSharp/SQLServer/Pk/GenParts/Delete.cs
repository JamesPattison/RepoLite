// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace RepoLite.GeneratorEngine.Generators.CSharp.SQLServer.Pk.GenParts
{
    using System.Linq;
    using RepoLite.Common.Models;
    using System.Text;
    using Common.Extensions;
    using Common;
    using RepoLite.GeneratorEngine.Generators.CSharp.SQLServer.Pk.Helpers;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Delete : DeleteBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write(" \r\n");
            
            #line 8 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 var pk = generationObject.Table.PrimaryKeys.FirstOrDefault();
            
            #line default
            #line hidden
            this.Write("       public bool Delete(");
            
            #line 9 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.ClassName));
            
            #line default
            #line hidden
            this.Write(" item)\r\n        {\r\n            if (item == null)\r\n                return false;\r\n\r\n            var deleteColumn = new DeleteColumn(\"");
            
            #line 14 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write("\", item.");
            
            #line 14 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write(", SqlDbType.");
            
            #line 14 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SQLServerHelpers.GetDbType(pk.SqlDataTypeCode)));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n            if (BaseDelete(deleteColumn, out var items))\r\n            {\r\n");
            
            #line 18 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationObject.InheritedTable != null) { 
            
            #line default
            #line hidden
            this.Write("                if (_");
            
            #line 19 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.InheritedTable.RepositoryName.LowerFirst()));
            
            #line default
            #line hidden
            this.Write(".Delete(item))\r\n                {\r\n");
            
            #line 21 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationSettings.IncludeCaching) {
            
            #line default
            #line hidden
            this.Write("                    if (CacheEnabled)\r\n                    {\r\n                        RemoveFromCache(item.");
            
            #line 24 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write(");\r\n                    }\r\n");
            
            #line 26 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                    return true;\r\n                }\r\n");
            
            #line 29 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            
            #line 30 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationObject.InheritedTable == null) { 
            
            #line default
            #line hidden
            
            #line 31 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationSettings.IncludeCaching) {
            
            #line default
            #line hidden
            this.Write("                if (CacheEnabled)\r\n                {\r\n                    RemoveFromCache(item.");
            
            #line 34 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write(");\r\n                }\r\n");
            
            #line 36 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                return true;\r\n");
            
            #line 38 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            }\r\n            return false;\r\n        }\r\n        public bool Delete(IEnumerable<");
            
            #line 42 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.ClassName));
            
            #line default
            #line hidden
            this.Write("> items)\r\n        {\r\n            if (!items.Any()) return true;\r\n            var deleteValues = new List<object>();\r\n            foreach (var item in items)\r\n            {\r\n                deleteValues.Add(item.");
            
            #line 48 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write(");\r\n            }\r\n\r\n            if (BaseDelete(\"");
            
            #line 51 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write("\", deleteValues))\r\n            {\r\n");
            
            #line 53 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationObject.InheritedTable != null) { 
            
            #line default
            #line hidden
            this.Write("                if (_");
            
            #line 54 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.InheritedTable.RepositoryName.LowerFirst()));
            
            #line default
            #line hidden
            this.Write(".Delete(items))\r\n                {\r\n");
            
            #line 56 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationSettings.IncludeCaching) {
            
            #line default
            #line hidden
            this.Write("                    if (CacheEnabled)\r\n                    {\r\n                        foreach (var item in items)\r\n                        {\r\n                            RemoveFromCache(item.");
            
            #line 61 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write(");\r\n                        }\r\n                    }\r\n");
            
            #line 64 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                    return true;\r\n                }\r\n");
            
            #line 67 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            
            #line 68 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationObject.InheritedTable == null) { 
            
            #line default
            #line hidden
            
            #line 69 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationSettings.IncludeCaching) {
            
            #line default
            #line hidden
            this.Write("                if (CacheEnabled)\r\n                {\r\n                    foreach (var item in items)\r\n                    {\r\n                        RemoveFromCache(item.");
            
            #line 74 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write(");\r\n                    }\r\n                }\r\n");
            
            #line 77 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                return true;\r\n");
            
            #line 79 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            }\r\n            return false;\r\n        }\r\n\r\n        public bool Delete(");
            
            #line 84 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DataTypeString));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 84 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            if (Delete(new ");
            
            #line 86 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.ClassName));
            
            #line default
            #line hidden
            this.Write(" { ");
            
            #line 86 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 86 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write(" }))\r\n            {\r\n");
            
            #line 88 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationObject.InheritedTable != null) { 
            
            #line default
            #line hidden
            this.Write("                if (_");
            
            #line 89 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.InheritedTable.RepositoryName.LowerFirst()));
            
            #line default
            #line hidden
            this.Write(".Delete(");
            
            #line 89 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write("))\r\n                {\r\n");
            
            #line 91 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationSettings.IncludeCaching) {
            
            #line default
            #line hidden
            this.Write("                    if (CacheEnabled)\r\n                    {\r\n                        RemoveFromCache(");
            
            #line 94 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write(");\r\n                    }\r\n");
            
            #line 96 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                    return true;\r\n                }\r\n");
            
            #line 99 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            
            #line 100 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationObject.InheritedTable == null) { 
            
            #line default
            #line hidden
            
            #line 101 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationSettings.IncludeCaching) {
            
            #line default
            #line hidden
            this.Write("                if (CacheEnabled)\r\n                {\r\n                    RemoveFromCache(");
            
            #line 104 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write(");\r\n                }\r\n");
            
            #line 106 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                return true;\r\n");
            
            #line 108 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            }\r\n            return false;\r\n        }\r\n\r\n\r\n        public bool Delete(IEnumerable<");
            
            #line 114 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DataTypeString));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 114 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write("s)\r\n        {\r\n            if (!");
            
            #line 116 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write("s.Any()) return true;\r\n            var deleteValues = new List<object>();\r\n            deleteValues.AddRange(");
            
            #line 118 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write("s.Cast<object>());\r\n            if (BaseDelete(\"");
            
            #line 119 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DbColumnName));
            
            #line default
            #line hidden
            this.Write("\", deleteValues))\r\n            {\r\n");
            
            #line 121 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationObject.InheritedTable != null) { 
            
            #line default
            #line hidden
            this.Write("                if (_");
            
            #line 122 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.InheritedTable.RepositoryName.LowerFirst()));
            
            #line default
            #line hidden
            this.Write(".Delete(");
            
            #line 122 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write("s))\r\n                {\r\n");
            
            #line 124 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationSettings.IncludeCaching) {
            
            #line default
            #line hidden
            this.Write("                    if (CacheEnabled)\r\n                    {\r\n                        foreach (var ");
            
            #line 127 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write(" in ");
            
            #line 127 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write("s)\r\n                        {\r\n                            RemoveFromCache(");
            
            #line 129 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write(");\r\n                        }\r\n                    }\r\n");
            
            #line 132 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                    return true;\r\n                }\r\n");
            
            #line 135 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            
            #line 136 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationObject.InheritedTable == null) { 
            
            #line default
            #line hidden
            
            #line 137 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 if (generationSettings.IncludeCaching) {
            
            #line default
            #line hidden
            this.Write("                if (CacheEnabled)\r\n                {\r\n                    foreach (var ");
            
            #line 140 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write(" in ");
            
            #line 140 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write("s)\r\n                    {\r\n                        RemoveFromCache(");
            
            #line 142 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.FieldName));
            
            #line default
            #line hidden
            this.Write(");\r\n                    }\r\n                }\r\n");
            
            #line 145 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                return true;\r\n");
            
            #line 147 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            }\r\n            return false;\r\n        }\r\n\r\n        ");
            
            #line 152 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DeleteBy(generationObject)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 153 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"

   string DeleteBy(RepositoryGenerationObject generationObject)
   {
       return TtHelpers.AppendInheritanceLogic(generationObject, (column, rgo) =>
       {
           var isb = new StringBuilder();
           isb.AppendLine(
               $"{Helpers.Tab2}public bool DeleteBy{column.DbColumnName}({column.DataTypeString} {column.FieldName})");
           isb.AppendLine($"{Helpers.Tab2}{{");

           isb.AppendLine($"{Helpers.Tab3}if (BaseDelete(new DeleteColumn(\"{column.DbColumnName}\", {column.FieldName}, SqlDbType.{SQLServerHelpers.GetDbType(column.SqlDataTypeCode)}), out var items))");
           isb.AppendLine($"{Helpers.Tab3}{{");
           if (generationSettings.IncludeCaching)
           {
               isb.AppendLine($"{Helpers.Tab4}if (CacheEnabled)");
               isb.AppendLine($"{Helpers.Tab4}{{");
               isb.AppendLine($"{Helpers.Tab5}foreach (var item in items)");
               isb.AppendLine($"{Helpers.Tab5}{{");
               isb.AppendLine($"{Helpers.Tab6}RemoveFromCache(item.{pk.DbColumnName});");
               isb.AppendLine($"{Helpers.Tab5}}}");
               isb.AppendLine($"{Helpers.Tab4}}}");
           }
           isb.AppendLine($"{Helpers.Tab4}return true;");
           isb.AppendLine($"{Helpers.Tab3}}}");

           isb.AppendLine($"{Helpers.Tab3}return false;");

           isb.AppendLine($"{Helpers.Tab2}}}");
           return isb.ToString();
       });
   }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Pk\GenParts\Delete.tt"

private global::RepoLite.Common.Options.GenerationOptions _generationSettingsField;

/// <summary>
/// Access the generationSettings parameter of the template.
/// </summary>
private global::RepoLite.Common.Options.GenerationOptions generationSettings
{
    get
    {
        return this._generationSettingsField;
    }
}

private global::RepoLite.Common.Models.RepositoryGenerationObject _generationObjectField;

/// <summary>
/// Access the generationObject parameter of the template.
/// </summary>
private global::RepoLite.Common.Models.RepositoryGenerationObject generationObject
{
    get
    {
        return this._generationObjectField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool generationSettingsValueAcquired = false;
if (this.Session.ContainsKey("generationSettings"))
{
    this._generationSettingsField = ((global::RepoLite.Common.Options.GenerationOptions)(this.Session["generationSettings"]));
    generationSettingsValueAcquired = true;
}
if ((generationSettingsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("generationSettings");
    if ((data != null))
    {
        this._generationSettingsField = ((global::RepoLite.Common.Options.GenerationOptions)(data));
    }
}
bool generationObjectValueAcquired = false;
if (this.Session.ContainsKey("generationObject"))
{
    this._generationObjectField = ((global::RepoLite.Common.Models.RepositoryGenerationObject)(this.Session["generationObject"]));
    generationObjectValueAcquired = true;
}
if ((generationObjectValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("generationObject");
    if ((data != null))
    {
        this._generationObjectField = ((global::RepoLite.Common.Models.RepositoryGenerationObject)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class DeleteBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
