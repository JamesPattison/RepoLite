// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace RepoLite.GeneratorEngine.Generators.CSharp.SQLServer.Templates
{
    using System.Linq;
    using RepoLite.Common.Models.ProcedureParameters;
    using MoreLinq.Extensions;
    using RepoLite.Common.Models.Querying;
    using System.Text;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Procedure : ProcedureBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Xml;\r\n\r\nnamespace ");
            
            #line 21 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationSettings.ProcedureGenerationNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public partial class Procedures\r\n    {\r\n");
            
            #line 25 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 if (ProcedureGenerationObject.HasParameters){ 
            
            #line default
            #line hidden
            
            #line 26 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach (var tableTypeParameter in ProcedureGenerationObject.Parameters.Where(x => x is TableTypeParameter).Cast<TableTypeParameter>().DistinctBy(x => x.SqlName)) { 
            
            #line default
            #line hidden
            this.Write("        public record ");
            
            #line 27 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterName(tableTypeParameter)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 27 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(',', tableTypeParameter.Columns.Select(x => $"{x.TypeString} {x.Name}"))));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 28 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 } 
            
            #line default
            #line hidden
            
            #line 29 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 31 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 if (ProcedureGenerationObject.HasResults){ 
            
            #line default
            #line hidden
            this.Write("        public record ");
            
            #line 32 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture($"{ProcedureGenerationObject.Name}_Result"));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 33 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach (var resultSet in ProcedureGenerationObject.ResultSets) { 
            
            #line default
            #line hidden
            this.Write("            IEnumerable<");
            
            #line 34 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture($"{ProcedureGenerationObject.Name}_Result_{ResultSetName(resultSet)}"));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 34 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultSet.Name));
            
            #line default
            #line hidden
            
            #line 34 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultSet == ProcedureGenerationObject.ResultSets.Last()?");": ","));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 35 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 37 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach (var resultSet in ProcedureGenerationObject.ResultSets) { 
            
            #line default
            #line hidden
            this.Write("        public record ");
            
            #line 38 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture($"{ProcedureGenerationObject.Name}_Result_{ResultSetName(resultSet)}"));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 38 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(',', resultSet.Values.Select(x => $"{x.Type} {x.Name}"))));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 39 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 } 
            
            #line default
            #line hidden
            
            #line 40 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
}
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 41 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResultName()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 41 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProcedureGenerationObject.Name));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 42 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterList()));
            
            #line default
            #line hidden
            this.Write("\r\n        ) \r\n        {\r\n            using var conn = new SqlConnection(_connectionString);\r\n            using var command = new SqlCommand(\"");
            
            #line 46 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProcedureGenerationObject.Name));
            
            #line default
            #line hidden
            this.Write("\", conn)\r\n            {\r\n                CommandType = CommandType.StoredProcedure\r\n            };\r\n\r\n");
            
            #line 51 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach(var parameter in ProcedureGenerationObject.Parameters.Where(x => x is BasicParameter).Cast<BasicParameter>()) { 
            
            #line default
            #line hidden
            this.Write("            command.Parameters.AddWithValue(\"");
            
            #line 52 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 52 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 53 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 }
            
            #line default
            #line hidden
            
            #line 54 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach(var parameter in ProcedureGenerationObject.Parameters.Where(x => x is TableTypeParameter).Cast<TableTypeParameter>()) { 
            
            #line default
            #line hidden
            this.Write("            var dt_");
            
            #line 55 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name.TrimStart('@')));
            
            #line default
            #line hidden
            this.Write(" = new DataTable();\r\n");
            
            #line 56 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach(var col in parameter.Columns) { 
            
            #line default
            #line hidden
            this.Write("            dt_");
            
            #line 57 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name.TrimStart('@')));
            
            #line default
            #line hidden
            this.Write(".Columns.Add(\"");
            
            #line 57 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name));
            
            #line default
            #line hidden
            this.Write("\", typeof(");
            
            #line 57 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Type));
            
            #line default
            #line hidden
            this.Write("));\r\n");
            
            #line 58 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 }
            
            #line default
            #line hidden
            this.Write("            foreach (var item in ");
            
            #line 59 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name.TrimStart('@')));
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n                dt_");
            
            #line 61 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name.TrimStart('@')));
            
            #line default
            #line hidden
            this.Write(".Rows.Add(\r\n");
            
            #line 62 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach(var col in parameter.Columns) { 
            
            #line default
            #line hidden
            this.Write("                    item.");
            
            #line 63 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name));
            
            #line default
            #line hidden
            
            #line 63 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col == parameter.Columns.Last() ? "": ","));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 64 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 }
            
            #line default
            #line hidden
            this.Write("                );\r\n            }\r\n\r\n            var param = command.Parameters.AddWithValue(\"");
            
            #line 67 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("\", dt_");
            
            #line 67 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name.TrimStart('@')));
            
            #line default
            #line hidden
            this.Write(");\r\n            param.SqlDbType = SqlDbType.Structured;\r\n            param.TypeName = \"");
            
            #line 69 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Schema));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 69 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.SqlName));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 70 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 }
            
            #line default
            #line hidden
            this.Write("\r\n            conn.Open();\r\n");
            
            #line 73 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 if (ProcedureGenerationObject.HasResults) { 
            
            #line default
            #line hidden
            this.Write("            var da = new SqlDataAdapter(command);\r\n            var ds = new DataSet();\r\n            da.Fill(ds);\r\n\r\n            if (ds.Tables.Count != ");
            
            #line 78 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProcedureGenerationObject.ResultSets.Count));
            
            #line default
            #line hidden
            this.Write(") throw new Exception(\"Return count differs to expected. Please regenerate\");\r\n\r\n");
            
            #line 80 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach(var resultSet in ProcedureGenerationObject.ResultSets) { 
            
            #line default
            #line hidden
            this.Write("            \r\n            var ");
            
            #line 81 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResultSetName(resultSet)));
            
            #line default
            #line hidden
            this.Write("_table = ds.Tables[");
            
            #line 81 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProcedureGenerationObject.ResultSets.IndexOf(resultSet)));
            
            #line default
            #line hidden
            this.Write("];\r\n\r\n            var ");
            
            #line 83 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResultSetName(resultSet)));
            
            #line default
            #line hidden
            this.Write("Result = from row in ");
            
            #line 83 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResultSetName(resultSet)));
            
            #line default
            #line hidden
            this.Write("_table.AsEnumerable()\r\n                select new ");
            
            #line 84 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture($"{ProcedureGenerationObject.Name}_Result_{ResultSetName(resultSet)}"));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 85 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach(var item in resultSet.Values) { 
            
            #line default
            #line hidden
            this.Write("                    row.Field<");
            
            #line 86 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Type));
            
            #line default
            #line hidden
            this.Write(">(\"");
            
            #line 86 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\")");
            
            #line 86 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item == resultSet.Values.Last() ? "": ","));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 87 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                );\r\n");
            
            #line 89 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            return new ");
            
            #line 91 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture($"{ProcedureGenerationObject.Name}_Result"));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 92 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 foreach(var resultSet in ProcedureGenerationObject.ResultSets) { 
            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 93 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResultSetName(resultSet)));
            
            #line default
            #line hidden
            this.Write("Result");
            
            #line 93 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultSet == ProcedureGenerationObject.ResultSets.Last()?"":","));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 94 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 } 
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n");
            
            #line 97 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            command.ExecuteNonQuery();\r\n");
            
            #line 99 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n    \r\n    }\r\n}\r\n\r\n");
            
            #line 105 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"

   string ParameterName(TableTypeParameter parameter)
   {
       return $"{ProcedureGenerationObject.Name}_{parameter.SqlName}_Param";
   }
   string ResultName()
   {
       return ProcedureGenerationObject.HasResults ? $"{ProcedureGenerationObject.Name}_Result" : "void";
   }
   string ResultSetName(ResultsSet resultSet)
   {
       return resultSet.Name ?? $"{ProcedureGenerationObject.ResultSets.IndexOf(resultSet) + 1}";
   }

   string ParameterList()
   {
       var parameterString = new StringBuilder();
       var prependComma = false;
       var basicParameters = ProcedureGenerationObject.Parameters.Where(x => x is BasicParameter).Cast<BasicParameter>().ToArray();
       foreach (var parameter in basicParameters)
       {
           prependComma = true;
           parameterString.Append($"\t\t\t{parameter.Type} {parameter.Name}");
           if (parameter != basicParameters.Last())
               parameterString.AppendLine(",");
       }
       var tableTypeParameters = ProcedureGenerationObject.Parameters.Where(x => x is TableTypeParameter).Cast<TableTypeParameter>().ToArray();
       foreach (
           var tableTypeParameter in tableTypeParameters)
       {

           if (prependComma)
           {
               parameterString.AppendLine(",");
               prependComma = false;
           }
           
           parameterString.Append($"\t\t\tIEnumerable<{ParameterName(tableTypeParameter)}> {tableTypeParameter.Name.TrimStart('@')}");
           if (tableTypeParameter != tableTypeParameters.Last())
               parameterString.AppendLine(",");
       }
       return parameterString.ToString();
   }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\SQLServer\Templates\Procedure.tt"

private global::RepoLite.Common.Options.GenerationOptions _generationSettingsField;

/// <summary>
/// Access the generationSettings parameter of the template.
/// </summary>
private global::RepoLite.Common.Options.GenerationOptions generationSettings
{
    get
    {
        return this._generationSettingsField;
    }
}

private global::RepoLite.Common.Models.ProcedureGenerationObject _ProcedureGenerationObjectField;

/// <summary>
/// Access the ProcedureGenerationObject parameter of the template.
/// </summary>
private global::RepoLite.Common.Models.ProcedureGenerationObject ProcedureGenerationObject
{
    get
    {
        return this._ProcedureGenerationObjectField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool generationSettingsValueAcquired = false;
if (this.Session.ContainsKey("generationSettings"))
{
    this._generationSettingsField = ((global::RepoLite.Common.Options.GenerationOptions)(this.Session["generationSettings"]));
    generationSettingsValueAcquired = true;
}
if ((generationSettingsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("generationSettings");
    if ((data != null))
    {
        this._generationSettingsField = ((global::RepoLite.Common.Options.GenerationOptions)(data));
    }
}
bool ProcedureGenerationObjectValueAcquired = false;
if (this.Session.ContainsKey("ProcedureGenerationObject"))
{
    this._ProcedureGenerationObjectField = ((global::RepoLite.Common.Models.ProcedureGenerationObject)(this.Session["ProcedureGenerationObject"]));
    ProcedureGenerationObjectValueAcquired = true;
}
if ((ProcedureGenerationObjectValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ProcedureGenerationObject");
    if ((data != null))
    {
        this._ProcedureGenerationObjectField = ((global::RepoLite.Common.Models.ProcedureGenerationObject)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ProcedureBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
