<#@ parameter type="RepoLite.Common.Options.GenerationOptions" name="generationSettings" #>
<#@ parameter type="RepoLite.Common.Models.Procedure" name="procedure" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="RepoLite.Common.Models.ProcedureParameters" #>
<#@ import namespace="MoreLinq.Extensions" #>
<#@ import namespace="RepoLite.Common.Models.Querying" #>
<#@ import namespace="System.Text" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Xml;

namespace <#= generationSettings.ProcedureGenerationNamespace #>
{
    public partial class Procedures
    {
<# if (procedure.HasParameters){ #>
<# foreach (var tableTypeParameter in procedure.Parameters.Where(x => x is TableTypeParameter).Cast<TableTypeParameter>().DistinctBy(x => x.SqlName)) { #>
        public record <#= ParameterName(tableTypeParameter) #>(<#= string.Join(',', tableTypeParameter.Columns.Select(x => $"{x.TypeString} {x.Name}")) #>);
<# } #>
<#}#>

<# if (procedure.HasResults){ #>
        public record <#= $"{procedure.Name}_Result" #>(
<# foreach (var resultSet in procedure.ResultSets) { #>
            IEnumerable<<#= $"{procedure.Name}_Result_{ResultSetName(resultSet)}" #>> <#= resultSet.Name #><#=resultSet == procedure.ResultSets.Last()?");": ","#>
<# } #>

<# foreach (var resultSet in procedure.ResultSets) { #>
        public record <#= $"{procedure.Name}_Result_{ResultSetName(resultSet)}" #>(<#= string.Join(',', resultSet.Values.Select(x => $"{x.Type} {x.Name}")) #>);
<# } #>
<#}#>
        public <#= ResultName() #> <#= procedure.Name #>(
<#= ParameterList() #>
        ) 
        {
            using var conn = new SqlConnection(_connectionString);
            using var command = new SqlCommand("<#= procedure.Name #>", conn)
            {
                CommandType = CommandType.StoredProcedure
            };

<# foreach(var parameter in procedure.Parameters.Where(x => x is BasicParameter).Cast<BasicParameter>()) { #>
            command.Parameters.AddWithValue("<#= parameter.Name #>", <#= parameter.Name #>);
<# }#>
<# foreach(var parameter in procedure.Parameters.Where(x => x is TableTypeParameter).Cast<TableTypeParameter>()) { #>
            var dt_<#= parameter.Name.TrimStart('@') #> = new DataTable();
<# foreach(var col in parameter.Columns) { #>
            dt_<#= parameter.Name.TrimStart('@') #>.Columns.Add("<#= col.Name #>", typeof(<#= col.Type #>));
<# }#>
            foreach (var item in <#= parameter.Name.TrimStart('@') #>)
            {
                dt_<#= parameter.Name.TrimStart('@') #>.Rows.Add(
<# foreach(var col in parameter.Columns) { #>
                    item.<#=col.Name#><#= col == parameter.Columns.Last() ? "": ","#>
<# }#>                );
            }

            var param = command.Parameters.AddWithValue("<#= parameter.Name #>", dt_<#= parameter.Name.TrimStart('@') #>);
            param.SqlDbType = SqlDbType.Structured;
            param.TypeName = "<#= parameter.Schema #>.<#= parameter.SqlName #>";
<# }#>

            conn.Open();
<# if (procedure.HasResults) { #>
            var da = new SqlDataAdapter(command);
            var ds = new DataSet();
            da.Fill(ds);

            if (ds.Tables.Count != <#= procedure.ResultSets.Count #>) throw new Exception("Return count differs to expected. Please regenerate");

<# foreach(var resultSet in procedure.ResultSets) { #>            
            var <#= ResultSetName(resultSet) #>_table = ds.Tables[<#= procedure.ResultSets.IndexOf(resultSet) #>];

            var <#= ResultSetName(resultSet) #>Result = from row in <#= ResultSetName(resultSet) #>_table.AsEnumerable()
                select new <#= $"{procedure.Name}_Result_{ResultSetName(resultSet)}" #>(
<# foreach(var item in resultSet.Values) { #>
                    row.Field<<#= item.Type #>>("<#= item.Name #>")<#= item == resultSet.Values.Last() ? "": ","#>
<# } #>
                );
<# } #>

            return new <#= $"{procedure.Name}_Result" #>(
<# foreach(var resultSet in procedure.ResultSets) { #>
                <#= ResultSetName(resultSet) #>Result<#= resultSet == procedure.ResultSets.Last()?"":"," #>
<# } #>
);

<# } else { #>
            command.ExecuteNonQuery();
<# } #>
        }
    
    }
}

<#
   string ParameterName(TableTypeParameter parameter)
   {
       return $"{procedure.Name}_{parameter.SqlName}_Param";
   }
   string ResultName()
   {
       return procedure.HasResults ? $"{procedure.Name}_Result" : "void";
   }
   string ResultSetName(ResultsSet resultSet)
   {
       return resultSet.Name ?? $"{procedure.ResultSets.IndexOf(resultSet) + 1}";
   }

   string ParameterList()
   {
       var parameterString = new StringBuilder();
       var prependComma = false;
       var basicParameters = procedure.Parameters.Where(x => x is BasicParameter).Cast<BasicParameter>().ToArray();
       foreach (var parameter in basicParameters)
       {
           prependComma = true;
           parameterString.Append($"\t\t\t{parameter.Type} {parameter.Name}");
           if (parameter != basicParameters.Last())
               parameterString.AppendLine(",");
       }
       var tableTypeParameters = procedure.Parameters.Where(x => x is TableTypeParameter).Cast<TableTypeParameter>().ToArray();
       foreach (
           var tableTypeParameter in tableTypeParameters)
       {

           if (prependComma)
           {
               parameterString.AppendLine(",");
               prependComma = false;
           }
           
           parameterString.Append($"\t\t\tIEnumerable<{ParameterName(tableTypeParameter)}> {tableTypeParameter.Name.TrimStart('@')}");
           if (tableTypeParameter != tableTypeParameters.Last())
               parameterString.AppendLine(",");
       }
       return parameterString.ToString();
   }
#>