// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace RepoLite.GeneratorEngine.Generators.CSharp.MySql.Templates.Repositories
{
    using RepoLite.Common.Extensions;
    using System.Linq;
    using RepoLite.Common.Models;
    using System.Text;
    using RepoLite.Common;
    using System.Xml;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Model : ModelBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 9 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 var pk = generationObject.Table.PrimaryKeys.FirstOrDefault();
            
            #line default
            #line hidden
            this.Write("//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Xml;\r\nusing ");
            
            #line 22 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationSettings.ModelGenerationNamespace));
            
            #line default
            #line hidden
            this.Write(".Base;\r\nusing MySqlConnector;\r\n\r\nnamespace ");
            
            #line 25 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationSettings.ModelGenerationNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 27 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 if (generationObject.Inherits) { 
            
            #line default
            #line hidden
            this.Write("\tpublic ");
            
            #line 28 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationSettings.GenerateSealedObjects ? "sealed " : ""));
            
            #line default
            #line hidden
            this.Write("partial class ");
            
            #line 28 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.ClassName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 28 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.InheritedTable.ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 29 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\tpublic ");
            
            #line 30 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationSettings.GenerateSealedObjects ? "sealed " : ""));
            
            #line default
            #line hidden
            this.Write("partial class ");
            
            #line 30 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.ClassName));
            
            #line default
            #line hidden
            this.Write(" : BaseModel\r\n");
            
            #line 31 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t{\r\n\t\tpublic override string EntityName => \"");
            
            #line 33 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.DbTableName));
            
            #line default
            #line hidden
            this.Write("\";\r\n\r\n\t\tpublic ");
            
            #line 35 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Inherits ? "new ": ""));
            
            #line default
            #line hidden
            this.Write("static string CacheKey(");
            
            #line 35 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk.DataTypeString));
            
            #line default
            #line hidden
            this.Write(" id) => $\"");
            
            #line 35 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.DbTableName));
            
            #line default
            #line hidden
            this.Write("_{id}\";\r\n");
            
            #line 36 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 foreach (var column in generationObject.Table.Columns.Where(x => x.DbTableName == generationObject.Table.DbTableName)) { 
            
            #line default
            #line hidden
            
            #line 37 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 if (generationObject.Inherits && column.PrimaryKey) continue; 
            
            #line default
            #line hidden
            this.Write("        protected ");
            
            #line 38 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.DataTypeString));
            
            #line default
            #line hidden
            
            #line 38 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Common.Helpers.IsCSharpNullable(column.DataTypeString) && column.IsNullable ? "?" : ""));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 38 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 39 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 41 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 foreach (var column in generationObject.Table.Columns.Where(x => x.DbTableName == generationObject.Table.DbTableName)) { 
            
            #line default
            #line hidden
            
            #line 42 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 if (generationObject.Inherits && column.PrimaryKey) continue; 
            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 43 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.DataTypeString));
            
            #line default
            #line hidden
            
            #line 43 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Common.Helpers.IsCSharpNullable(column.DataTypeString) && column.IsNullable ? "?" : ""));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 43 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.DbColumnName));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget => _");
            
            #line 45 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\tset => SetValue(ref _");
            
            #line 46 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(", value);\r\n\t\t}\r\n");
            
            #line 48 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 if (column.ForeignKey) {
            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Nothing is done with this, it's merely there to hold data IF you wish to populate it\r\n        /// </summary>\r\n        public ");
            
            #line 52 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ForeignKeyTargetTable.ToModelName(generationSettings.ModelClassNameFormat)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 52 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.DbColumnName.TrimEnd('d', 'I')));
            
            #line default
            #line hidden
            this.Write("{ get; set; }\r\n");
            
            #line 53 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            
            #line 54 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tpublic ");
            
            #line 56 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.ClassName));
            
            #line default
            #line hidden
            this.Write("() { }\r\n\t\tpublic ");
            
            #line 57 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.ClassName));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 58 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 foreach (var column in generationObject.Table.Columns) { 
            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 59 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.DataType != typeof(XmlDocument) ? column.DataTypeString: "string"));
            
            #line default
            #line hidden
            
            #line 59 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Helpers.IsCSharpNullable(column.DataTypeString) && column.IsNullable ? "?" : ""));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 59 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            
            #line 59 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column == generationObject.Table.Columns.Last()? ")": ","));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 60 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t{\r\n");
            
            #line 62 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 foreach (var column in generationObject.Table.Columns) { 
            
            #line default
            #line hidden
            this.Write("            _");
            
            #line 63 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 63 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 64 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\r\n\t\tpublic override IBaseModel SetValues(DataRow row, string propertyPrefix)\r\n\t\t{\r\n");
            
            #line 69 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 if (generationObject.Inherits) {
            
            #line default
            #line hidden
            this.Write("            base.SetValues(row, propertyPrefix);\r\n");
            
            #line 71 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            
            #line 72 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 foreach (var column in generationObject.Table.Columns) { 
            
            #line default
            #line hidden
            
            #line 73 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 if (generationObject.Inherits && column.PrimaryKey) continue; 
            
            #line default
            #line hidden
            
            #line 74 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 if (column.DataType == typeof(string)) { 
            
            #line default
            #line hidden
            this.Write("            _");
            
            #line 75 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(" = row.GetText($\"{propertyPrefix}");
            
            #line 75 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PropertyName));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 76 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            
            #line 77 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 else if (column.DataType == typeof(byte)) { 
            
            #line default
            #line hidden
            this.Write("            _");
            
            #line 78 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(" = (byte)row[$\"{propertyPrefix}");
            
            #line 78 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PropertyName));
            
            #line default
            #line hidden
            this.Write("\"];\r\n");
            
            #line 79 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            
            #line 80 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 else if (column.DataType == typeof(byte?)) { 
            
            #line default
            #line hidden
            this.Write("            _");
            
            #line 81 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(" = (byte?)row[$\"{propertyPrefix}");
            
            #line 81 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PropertyName));
            
            #line default
            #line hidden
            this.Write("\"];\r\n");
            
            #line 82 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            
            #line 83 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 else if (column.DataType == typeof(byte[])) { 
            
            #line default
            #line hidden
            this.Write("            _");
            
            #line 84 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(" = (byte[])row[$\"{propertyPrefix}");
            
            #line 84 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PropertyName));
            
            #line default
            #line hidden
            this.Write("\"];\r\n");
            
            #line 85 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            
            #line 86 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 else if (column.DataType == typeof(XmlDocument)) { 
            
            #line default
            #line hidden
            this.Write("            _");
            
            #line 87 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(" = new XmlDocument{InnerXml = row.GetText($\"{propertyPrefix}");
            
            #line 87 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PropertyName));
            
            #line default
            #line hidden
            this.Write("\")};\r\n");
            
            #line 88 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            
            #line 89 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 else { 
            
            #line default
            #line hidden
            this.Write("            _");
            
            #line 90 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.FieldName));
            
            #line default
            #line hidden
            this.Write(" = row.GetValue<");
            
            #line 90 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.DataTypeString));
            
            #line default
            #line hidden
            this.Write(">($\"{propertyPrefix}");
            
            #line 90 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.PropertyName));
            
            #line default
            #line hidden
            this.Write("\")");
            
            #line 90 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Helpers.IsCSharpNullable(column.DataTypeString) && column.IsNullable ? ";" : $" ?? default({column.DataTypeString});"));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 91 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            
            #line 92 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic override List<ValidationError> Validate()\r\n\t\t{\r\n\t\t\tvar validationErrors = new List<ValidationError>();\r\n");
            
            #line 99 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 if (generationObject.Inherits) {
            
            #line default
            #line hidden
            this.Write("            validationErrors.AddRange(base.Validate());\r\n");
            
            #line 101 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 103 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 foreach (var column in generationObject.Table.Columns) { 
            
            #line default
            #line hidden
            
            #line 104 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 if (column.DataType == typeof(string)) { 
            
            #line default
            #line hidden
            
            #line 105 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringValidation(column)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 106 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } else if (column.DataType == typeof(byte[])) { 
            
            #line default
            #line hidden
            
            #line 107 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ByteArrayValidation(column)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 108 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } else { 
            
            #line default
            #line hidden
            
            #line 109 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ElseValidation(column)));
            
            #line default
            #line hidden
            
            #line 109 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            
            #line 110 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\treturn validationErrors;\r\n\t\t}\r\n\r\n\t\tpublic ");
            
            #line 114 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Inherits ? "new ": ""));
            
            #line default
            #line hidden
            this.Write("static string Schema = \"");
            
            #line 114 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.Schema));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\tpublic ");
            
            #line 115 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Inherits ? "new ": ""));
            
            #line default
            #line hidden
            this.Write("static string TableName = \"");
            
            #line 115 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Table.DbTableName));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\tpublic ");
            
            #line 116 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generationObject.Inherits ? "new ": ""));
            
            #line default
            #line hidden
            this.Write("static List<ColumnDefinition> Columns => new List<ColumnDefinition>\r\n\t\t{\r\n");
            
            #line 118 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Columns(generationObject.Table)));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t};\r\n\t}\r\n}\r\n\r\n");
            
            #line 123 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"

   string StringValidation(Column column)
   {
       var sb = new StringBuilder();
       if (!column.IsNullable)
       {
           sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == null)");
           sb.AppendLine(
               $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be null\"));");
       }

       if (column.MaxLength > 0)
       {
           sb.AppendLine(
               $"{Helpers.Tab3}if (!string.IsNullOrEmpty({column.DbColumnName}) && {column.DbColumnName}.Length > {column.MaxLength})");
           sb.AppendLine(
               $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Max length is {column.MaxLength}\"));");
       }
       return sb.ToString();
   }

   string ByteArrayValidation(Column column)
   {
       var sb = new StringBuilder();
       if (!column.IsNullable)
       {
           sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == null)");
           sb.AppendLine(
               $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be null\"));");
       }

       if (column.MaxLength > 0)
       {
           sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} != null && {column.DbColumnName}.Length > {column.MaxLength})");
           sb.AppendLine(
               $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Binary array values exceed database size\"));");
       }
       return sb.ToString();
   }

   string ElseValidation(Column column)
   {
       var sb = new StringBuilder();
       switch (Activator.CreateInstance(column.DataType))
       {
           case decimal _:
               long maxValueForNum = 0;
               for (var i = 0; i < column.MaxIntLength; i++)
               {
                   maxValueForNum *= 10;
                   maxValueForNum += 9;
               }

               sb.AppendLine(
                   $"{Helpers.Tab3}if ({(column.IsNullable ? $"{column.DbColumnName}.HasValue && " : "")}Math.Floor({column.DbColumnName}{(column.IsNullable ? ".Value" : "")}) > {maxValueForNum})");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot exceed {maxValueForNum}\"));");
               sb.AppendLine(
                   $"{Helpers.Tab3}if ({(column.IsNullable ? $"{column.DbColumnName}.HasValue && " : "")}GetDecimalPlaces({column.DbColumnName}{(column.IsNullable ? ".Value" : "")}) > {column.MaxDecimalLength})");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot have more than {column.MaxDecimalLength} decimal place{(column.MaxDecimalLength > 1 ? "s" : "")}\"));");
               break;
           case DateTime _:
               sb.AppendLine($"{Helpers.Tab3}if ({column.PropertyName} == DateTime.MinValue)");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be default.\"));");
               break;
           case TimeSpan _:
               sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == TimeSpan.MinValue)");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be default.\"));");
               break;
           case DateTimeOffset _:
               sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == DateTimeOffset.MinValue)");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be default.\"));");
               break;
           case Guid _:
               sb.AppendLine($"{Helpers.Tab3}if ({column.DbColumnName} == Guid.Empty)");

               sb.AppendLine(
                   $"{Helpers.Tab4}validationErrors.Add(new ValidationError(nameof({column.DbColumnName}), \"Value cannot be default.\"));");
               break;
       }
       return sb.ToString();
   }

   string Columns(Table table)
   {
       var sb = new StringBuilder();
       foreach (var column in table.Columns)
       {
           var mySqlPrecisionColumns = new[]
           {
               "text", "money", "float", "ntext", "decimal", "numeric", "smallmoney", "varbinary", "varchar", "binary",
               "char", "nvarchar", "nchar", "sysname"
           };
           var colLengthVal = mySqlPrecisionColumns.Contains(column.SqlDataType)
               ? $"({Math.Max(column.MaxLength, column.MaxIntLength)})"
               : string.Empty;
           
           sb.AppendLine(
               $"{Helpers.Tab3}new ColumnDefinition({(column.DbColumnName == nameof(column.DbColumnName) ? $"nameof({table.ClassName}.{column.DbColumnName})" : $"\"{column.DbColumnName}\"")}, " +
               $"typeof({column.DataTypeString}), " +
               $"\"[{column.SqlDataType}]{colLengthVal}\", " +
               $"MySqlDbType.{MySqlHelpers.GetDbType(column.SqlDataType)}, " +
               $"{column.IsNullable.ToString().ToLower()}, " +
               $"{column.PrimaryKey.ToString().ToLower()}, " +
               $"{column.IsIdentity.ToString().ToLower()}),");
       }
       return sb.ToString();
   }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\Jimmy\source\repos\RepoLite\src\RepoLite\RepoLite.GeneratorEngine\Generators\CSharp\MySql\Templates\Repositories\Model.tt"

private global::RepoLite.Common.Options.GenerationOptions _generationSettingsField;

/// <summary>
/// Access the generationSettings parameter of the template.
/// </summary>
private global::RepoLite.Common.Options.GenerationOptions generationSettings
{
    get
    {
        return this._generationSettingsField;
    }
}

private global::RepoLite.Common.Models.RepositoryGenerationObject _generationObjectField;

/// <summary>
/// Access the generationObject parameter of the template.
/// </summary>
private global::RepoLite.Common.Models.RepositoryGenerationObject generationObject
{
    get
    {
        return this._generationObjectField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool generationSettingsValueAcquired = false;
if (this.Session.ContainsKey("generationSettings"))
{
    this._generationSettingsField = ((global::RepoLite.Common.Options.GenerationOptions)(this.Session["generationSettings"]));
    generationSettingsValueAcquired = true;
}
if ((generationSettingsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("generationSettings");
    if ((data != null))
    {
        this._generationSettingsField = ((global::RepoLite.Common.Options.GenerationOptions)(data));
    }
}
bool generationObjectValueAcquired = false;
if (this.Session.ContainsKey("generationObject"))
{
    this._generationObjectField = ((global::RepoLite.Common.Models.RepositoryGenerationObject)(this.Session["generationObject"]));
    generationObjectValueAcquired = true;
}
if ((generationObjectValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("generationObject");
    if ((data != null))
    {
        this._generationObjectField = ((global::RepoLite.Common.Models.RepositoryGenerationObject)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ModelBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
