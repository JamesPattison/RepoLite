<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="RepoLite.Common.Models" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Common" #>
<#@ parameter type="RepoLite.Common.Options.GenerationOptions" name="generationSettings" #>
<#@ parameter type="RepoLite.Common.Models.RepositoryGenerationObject" name="generationObject" #>
<#@ import namespace="RepoLite.Common.Extensions" #>
        public IEnumerable<<#= generationObject.Table.ClassName #>> Search(
<# foreach (var column in generationObject.Table.Columns.Where(x => !x.PrimaryKey)) { #>
            <#= column.DataType != typeof(XmlDocument) ? column.DataTypeString: "string" #><#= Helpers.IsCSharpNullable(column.DataTypeString) ? "?" : "" #> <#= column.FieldName #> = null<#= column == generationObject.Table.Columns.Last()? ")": ","#>
<# } #>
        {
            var queries = new List<QueryItem>();

<# // Search Body #>
<# foreach (var column in generationObject.Table.Columns.Where(x => !x.PrimaryKey)) { #>
<# if (Helpers.IsCSharpNullable(column.DataTypeString)) { #>
            if (<#= column.FieldName #>.HasValue)
<# } else { #>
<# switch (column.DataTypeString) { #>
<# case "String": #>
            if (!string.IsNullOrEmpty(<#= column.FieldName #>))
<# break;#>
<# case "Byte[]": #>
            if (<#= column.FieldName #>.Any())
<# break;#>
<# default: #>
            if (<#= column.FieldName #> != null)
<# break;#>
<# } #>
<# } #>
<# if (column.DataType != typeof(XmlDocument)) { #>
            queries.Add(new QueryItem(nameof(<#= generationObject.Table.ClassName #>.<#= column.DbColumnName #>), <#= column.FieldName #>));
<# } else { #>
            queries.Add(new QueryItem(nameof(<#= generationObject.Table.ClassName #>.<#= column.DbColumnName #>), <#= column.FieldName #>, typeof(XmlDocument));
<# }  } #>

            return BaseSearch(queries);
        }

<# // Find By #>

<# foreach (var column in generationObject.Table.Columns.Where(x => !x.PrimaryKey)) { #> 
        public IEnumerable<<#= generationObject.Table.ClassName #>> FindBy<#= column.PropertyName #>(<#= column.DataType != typeof(XmlDocument) ? column.DataTypeString: "string" #> <#= column.FieldName #>)
        {
            return FindBy<#= column.PropertyName #>(FindComparison.Equals, <#= column.FieldName #>);
        }

<# if (generationSettings.IncludeCaching) {#>
        public IEnumerable<<#= generationObject.Table.ClassName #>> FindBy<#= column.PropertyName #>(<#= column.DataType != typeof(XmlDocument) ? column.DataTypeString: "string" #> <#= column.FieldName #>, bool skipCache)
        {
            return FindBy<#= column.PropertyName #>(FindComparison.Equals, <#= column.FieldName #>, skipCache);
        }

        public IEnumerable<<#= generationObject.Table.ClassName #>> FindBy<#= column.PropertyName #>(FindComparison comparison, <#= column.DataType != typeof(XmlDocument) ? column.DataTypeString: "string" #> <#= column.FieldName #>)
        {
            return FindBy<#= column.PropertyName #>(comparison, <#= column.FieldName #>, false);
        }

        public IEnumerable<<#= generationObject.Table.ClassName #>> FindBy<#= column.PropertyName #>(FindComparison comparison, <#= column.DataType != typeof(XmlDocument) ? column.DataTypeString: "string" #> <#= column.FieldName #>, bool skipCache)
        {
            var items = Where(nameof(<#= generationObject.Table.ClassName #>.<#= column.DbColumnName #>), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), <#= column.FieldName #>).Results();
			if (CacheEnabled && !skipCache)
			{
				foreach (var item in items)
				{
					SaveToCache(item);
				}
			}
			return items;
        }
<# } else { #>
        public IEnumerable<<#= generationObject.Table.ClassName #>> FindBy<#= column.PropertyName #>(FindComparison comparison, <#= column.DataType != typeof(XmlDocument) ? column.DataTypeString: "string" #> <#= column.FieldName #>)
        {
            var items = Where(nameof(<#= generationObject.Table.ClassName #>.<#= column.DbColumnName #>), (Comparison)Enum.Parse(typeof(Comparison), comparison.ToString()), <#= column.FieldName #>).Results();
			return items;
        }
<# } #>
<# } #>